@using EcoleDeLaPerformance.Ui.Interfaces
@using EcoleDeLaPerformance.Ui.Models
@using EcoleDeLaPerformance.Ui.Shared.Dialog
@inject IDialogService dialog
@inject ISnackbar Snackbar
@inject IUserService userService

<div class="mt-8 w-100">
    <MudTable T="User" Items="@usersList" Hover="true" @ref="mudTable" FixedHeader="true" Breakpoint="Breakpoint.Xs" Height="400px" RowClass="cursor-pointer" OnRowClick="RowClickEvent">
        <HeaderContent>
            <MudTh>Nom</MudTh>
            <MudTh>Prénom</MudTh>
            <MudTh>Role</MudTh>
            <MudTh>Date début de suivi</MudTh>
            <MudTh>Date fin suivi</MudTh>
            <MudTh></MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Nom">@context.LastName</MudTd>
            <MudTd DataLabel="Prénom">@context.FirstName</MudTd>
            <MudTd DataLabel="Role">@context.Role</MudTd>
            @if (context.StartDate != null && context.StartDate != null)
            {
                <MudTd DataLabel="Date début de suivi">@context.StartDate.Value.ToShortDateString()</MudTd>
                <MudTd DataLabel="Date fin suivi">@context.EndDate.Value.ToShortDateString()</MudTd>
            }
            else
            {
                <MudTd DataLabel="Date fin suiviv"></MudTd>
                <MudTd DataLabel="Date début de suivi"></MudTd>
            }
            @if (context.IsActive == true)
            {
                <MudTd DataLabel=""><MudIconButton Icon="@Icons.Material.Filled.Delete" aria-label="delete" Color="Color.Secondary" OnClick="() => DeleteUser(context.UserId)"></MudIconButton></MudTd>
            }
            else
            {
                <MudTd DataLabel=""><MudIconButton Icon="@Icons.Material.Filled.Autorenew" aria-label="delete" Color="Color.Success" OnClick="() => RenewUser(context.UserId)"></MudIconButton></MudTd>
            }
        </RowTemplate>
    </MudTable>
</div>

@code {
    [Parameter]
    public User? userInfo { get; set; }

    [Parameter]
    public List<User>? usersList { get; set; }

    [Parameter]
    public EventCallback<bool> OnUserDeleted { get; set; }

    private MudTable<User> mudTable;
    private User? selectedItem;

    async void DeleteUser(int userId)
    {
        var parameters = new DialogParameters<ConfirmDialog>();

        parameters.Add("MainMessage", $"Voulez-vous suspendre le suivi de cet utilisateur ?");
        parameters.Add("warningMessage", $"ATTENTION, cette action suspend définitivement le suivi du commercial junior.");

        parameters.Add("ButtonConfirm", "Oui");
        parameters.Add("ButtonCancel", "Non");
        var options = new DialogOptions() { MaxWidth = MaxWidth.ExtraSmall, CloseButton = true, ClassBackground = "DialogBackgroundBlurEffect" };
        var dialogrespons = await (await dialog.ShowAsync<ConfirmDialog>("Supprimer", parameters, options)).Result;
        if (!dialogrespons.Canceled)
        {
            await userService.DeleteUserAsync(userId);
            usersList.RemoveAll(x => x.UserId == userId);
            await OnInitializedAsync();
            Snackbar.Add("L'utilisateur a bien été suspendu", Severity.Warning);

            await OnUserDeleted.InvokeAsync(true);

            StateHasChanged();
        }
    }

    async void RenewUser(int userId)
    {
        var parameters = new DialogParameters<ConfirmDialog>();

        parameters.Add("MainMessage", $"Voulez vous vraiment récupérer cet utilisateur ?");

        parameters.Add("ButtonConfirm", "Oui");
        parameters.Add("ButtonCancel", "Non");
        var options = new DialogOptions() { MaxWidth = MaxWidth.ExtraSmall, CloseButton = true, ClassBackground = "DialogBackgroundBlurEffect" };
        var dialogrespons = await (await dialog.ShowAsync<ConfirmDialog>("Récupérer", parameters, options)).Result;
        if (!dialogrespons.Canceled)
        {
            await userService.DeleteUserAsync(userId);
            usersList.RemoveAll(x => x.UserId == userId);
            await OnInitializedAsync();
            Snackbar.Add("L'utilisateur a bien été récupéré", Severity.Success);

            await OnUserDeleted.InvokeAsync(true);

            StateHasChanged();
        }
    }

    private async void RowClickEvent(TableRowClickEventArgs<User> tableRowClickEventArgs)
    {
        if (tableRowClickEventArgs != null)
        {
            selectedItem = tableRowClickEventArgs.Item;
            var parameters = new DialogParameters<UpdateUserDialog>();

            parameters.Add("userInfo", userInfo);
            parameters.Add("studentInfo", selectedItem);
            var options = new DialogOptions() { MaxWidth = MaxWidth.Medium, CloseButton = true, ClassBackground = "DialogBackgroundBlurEffect", FullWidth = true };
            var dialogresponse = await (await dialog.ShowAsync<UpdateUserDialog>("Modifier un utilisateur", parameters, options)).Result;
            if (!dialogresponse.Canceled)
            {
                await OnInitializedAsync();
                StateHasChanged();
            }
        }
    }
}
