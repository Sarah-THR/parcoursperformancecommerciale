@using EcoleDeLaPerformance.Ui.Interfaces
@using EcoleDeLaPerformance.Ui.Models
@using EcoleDeLaPerformance.Ui.Services
@inject StateContainerService stateContainerService
@inject IUserService userService
@using System.ComponentModel.DataAnnotations
@inject ISnackbar Snackbar

<div class="mt-14">
    <MudForm @ref="form" Model="model">
        <MudCard Class="p-5">
            <MudCardContent>
                <MudGrid>
                    <MudItem md="4" lg="4" sm="12">
                        <MudTextField Label="Email"
                                      @bind-Value="model.Email" For="@(() => model.Email)" Validation="@(new EmailAddressAttribute() { ErrorMessage = "Veuillez saisir une adresse email valide" })" Required RequiredError="Email obligatoire !" />
                    </MudItem>
                    <MudItem md="4" lg="4" sm="12">
                        <MudTextField Label="Nom"
                                      @bind-Value="model.Name" For="@(() => model.Name)" Required RequiredError="Prénom Nom obligatoire !" />
                    </MudItem>
                    <MudItem md="6" lg="6" sm="12">
                        <MudTextField Label="Entité/Site"
                                      @bind-Value="model.Entity" For="@(() => model.Entity)" Required RequiredError="Entité/Site obligatoire !" />
                    </MudItem>
                    <MudItem md="6" lg="6" sm="12">
                        <MudTextField Label="Directeur"
                                      @bind-Value="directorName" For="@(() => directorName)" Disabled />
                    </MudItem>
                    <MudItem md="6" lg="6" sm="12">
                        <MudDatePicker Label="Date début suivi" @bind-Date="StartFollowUpDateTime" For="@(() => StartFollowUpDateTime)" Disabled />
                    </MudItem>
                </MudGrid>
            </MudCardContent>
        </MudCard>
        <MudCardActions>
            <MudButton Variant="Variant.Filled" Color="Color.Secondary" Class="ml-auto mt-5" OnClick="@(async () => await SubmitForm())">Enregistrer les modifications</MudButton>
        </MudCardActions>
    </MudForm>
</div>

@code {
    [Parameter]
    public User userInfo { get; set; }
    private MudForm form;
    User model = new User();

    string directorName
    {
        get => model.Director?.Name ?? string.Empty;
        set
        {
            if (model.Director != null)
                model.Director.Name = value;
            else if (!string.IsNullOrWhiteSpace(value))
                model.Director = new User { Name = value };
        }
    }

    public DateTime? StartFollowUpDateTime
    {
        get => model.StartFollowUp?.ToDateTime(TimeOnly.MinValue);
        set => model.StartFollowUp = value.HasValue ? DateOnly.FromDateTime(value.Value) : null;
    }
    
    protected override void OnInitialized()
    {
        model = userInfo;
    }

    private async System.Threading.Tasks.Task SubmitForm()
    {
        await form.Validate();
        if (form.IsValid)
        {
            model.ProfilePicturePath = userInfo.ProfilePicturePath;
            await userService.UpdateUserAsync(model);
            Snackbar.Add("Vos informations ont bien été enregistrées !", Severity.Success);

        }
        else
        {
            Snackbar.Add("Veuillez remplir les champs obligatoires !", Severity.Error);
        }
    }

}
