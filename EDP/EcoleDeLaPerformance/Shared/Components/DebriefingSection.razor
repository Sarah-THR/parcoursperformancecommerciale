@using EcoleDeLaPerformance.Ui.Interfaces
@using EcoleDeLaPerformance.Ui.Models
@using EcoleDeLaPerformance.Ui.Services
@inject StateContainerService stateContainerService
@inject IUserService userService
@inject IDebriefService debriefService

<div>
    <MudGrid Class="mt-6">
        <MudItem xs="12" md="12">
            <MudCard Elevation="1">
                <MudCardContent>
                    <MudStack Row AlignItems="AlignItems.Center" Spacing="2" Class="mb-4">
                        <MudIcon Icon="@Icons.Material.Filled.BarChart" Color="Color.Primary" Size="Size.Large" />
                        <div>
                            <MudText Typo="Typo.h6">Affaires levées</MudText>
                        </div>
                        <MudTooltip Text="A faire avec le directeur" Arrow="true" Placement="Placement.Right">
                            <MudIcon Icon="@Icons.Material.Filled.Info" Color="Color.Primary" />
                        </MudTooltip>
                    </MudStack>

                    <MudStack Spacing="1">
                        <MudTextField @bind-Value="newCaseClosedItem" Label="Nouvelle affaire levée" Variant="Variant.Outlined"
                                      Immediate="true" Adornment="Adornment.End"
                                      OnKeyDown="@((e) => HandleKey(e, AddCaseClosedItem))"
                                      AdornmentIcon="@Icons.Material.Filled.Add"
                                      OnAdornmentClick="AddCaseClosedItem" ReadOnly="@(debrief?.IsDraft == false)" />

                        <MudList Class="mt-2" Dense="true" Style="max-height: 250px; overflow-y: auto;" T="string">
                            @foreach (var (item, index) in (caseClosedItems ?? new List<string>()).Select((val, i) => (val, i)))
                            {
                                <MudListItem>
                                    <MudText Typo="Typo.body2">@item</MudText>
                                    @if (debrief?.IsDraft == true || debrief?.IsDraft == null)
                                    {
                                        <MudIconButton Icon="@Icons.Material.Filled.Close" Size="Size.Small"
                                                       Color="Color.Error"
                                                       OnClick="@(() => RemoveItem("caseClosed", index))"
                                                       Class="ml-auto" />
                                    }
                                </MudListItem>
                            }
                        </MudList>
                    </MudStack>
                </MudCardContent>
            </MudCard>
        </MudItem>

        <MudItem xs="12" md="12">
            <MudCard Elevation="1">
                <MudCardContent>
                    <MudStack Row AlignItems="AlignItems.Center" Spacing="2" Class="mb-4">
                        <MudIcon Icon="@Icons.Material.Filled.BarChart" Color="Color.Success" Size="Size.Large" />
                        <div>
                            <MudText Typo="Typo.h6">Affaires en cours</MudText>
                        </div>
                        <MudTooltip Text="A faire avec le directeur" Arrow="true" Placement="Placement.Right">
                            <MudIcon Icon="@Icons.Material.Filled.Info" Color="Color.Primary" />
                        </MudTooltip>
                    </MudStack>

                    <MudStack Spacing="1">
                        <MudTextField @bind-Value="newOngoingCaseItem" Label="Nouvelle affaire en cours" Variant="Variant.Outlined"
                                      Immediate="true" Adornment="Adornment.End"
                                      OnKeyDown="@((e) => HandleKey(e, AddOngoingCaseItem))"
                                      AdornmentIcon="@Icons.Material.Filled.Add"
                                      OnAdornmentClick="AddOngoingCaseItem" ReadOnly="@(debrief?.IsDraft == false)" />

                        <MudList Class="mt-2" Dense="true" Style="max-height: 250px; overflow-y: auto;" T="string">
                            @foreach (var (item, index) in (ongoingCaseItems ?? new List<string>()).Select((val, i) => (val, i)))
                            {
                                <MudListItem>
                                    <MudText Typo="Typo.body2">@item</MudText>
                                    @if (debrief?.IsDraft == true || debrief?.IsDraft == null)
                                    {
                                        <MudIconButton Icon="@Icons.Material.Filled.Close" Size="Size.Small"
                                                       Color="Color.Error"
                                                       OnClick="@(() => RemoveItem("ongoingCase", index))"
                                                       Class="ml-auto" />
                                    }
                                </MudListItem>
                            }
                        </MudList>
                    </MudStack>
                </MudCardContent>
            </MudCard>
        </MudItem>

        <MudItem xs="12" md="12">
            <MudPaper Elevation="1">
                <MudCardContent>
                    <MudStack Row AlignItems="AlignItems.Center" Spacing="2" Class="mb-4">
                        <MudIcon Icon="@Icons.Material.Filled.Description" Color="Color.Secondary" Size="Size.Large" />
                        <MudText Typo="Typo.h6">Dossiers et contrats signés</MudText>
                    </MudStack>
                    <MudGrid>
                        <MudItem xs="12" md="4">
                            <DonutCard Title="Location" Icon="@Icons.Material.Filled.Leaderboard" IconColor="Color.Secondary" Data="@rentalData" Number="5" />
                        </MudItem>
                        <MudItem xs="12" md="4">
                            <DonutCard Title="Achats" Icon="@Icons.Material.Filled.Leaderboard" IconColor="Color.Secondary" Data="@purchaseData" Number="2" />
                        </MudItem>
                        <MudItem xs="12" md="4">
                            <DonutCard Title="Contrats" Icon="@Icons.Material.Filled.Leaderboard" IconColor="Color.Secondary" Data="@contratData" Number="2" />
                        </MudItem>
                    </MudGrid>
                </MudCardContent>
            </MudPaper>
        </MudItem>

        <MudItem xs="12" md="12">
            <MudPaper Elevation="1">
                <MudCardContent>
                    <MudStack Row AlignItems="AlignItems.Center" Spacing="2" Class="mb-4">
                        <MudIcon Icon="@Icons.Material.Filled.CalendarToday" Color="Color.Warning" Size="Size.Large" />
                        <div>
                            <MudText Typo="Typo.h6">Nombre de RDV PRA</MudText>
                            <MudText Typo="Typo.caption">(pris - réalisés - à venir)</MudText>
                        </div>
                        <MudTooltip Text="Il est nécessaire de saisir les informations dans la CRM afin qu'elles puissent être visualisées dans la partie debriefing." Arrow="true" Placement="Placement.Right">
                            <MudIcon Icon="@Icons.Material.Filled.Info" Color="Color.Primary" />
                        </MudTooltip>
                    </MudStack>
                    <MudGrid>
                        <MudItem xs="12" md="12">
                            <DonutCard Title="Rendez-vous" Icon="@Icons.Material.Filled.Leaderboard" IconColor="Color.Secondary" Data="@appointmentData" Labels="@appointmentLabels" Number="@((int)((appointmentData ?? new double[0]).Sum()))" />
                        </MudItem>
                    </MudGrid>
                </MudCardContent>
            </MudPaper>
        </MudItem>

        <MudItem xs="12" md="12" Class="d-flex justify-content-center">
            <MudButton Variant="Variant.Outlined" Color="Color.Secondary" StartIcon="@Icons.Material.Filled.SaveAs" Class="ma-4" OnClick="() => SaveBrief(true)">Brouillon</MudButton>
            <MudButton Variant="Variant.Filled" Color="Color.Secondary" StartIcon="@Icons.Material.Outlined.Save" Class="ma-4" OnClick="() => SaveBrief(false)">Enregistrer</MudButton>
        </MudItem>
    </MudGrid>
</div>

@code {
    public User userInfo => stateContainerService.UserInfo;
    private List<string> caseClosedItems = new();
    private List<string> ongoingCaseItems = new();
    private string newCaseClosedItem = "";
    private string newOngoingCaseItem = "";
    string[] appointmentLabels = new[] { "Rendez-vous à venir", "Rendez-vous réalisés" };
    DateOnly today = DateOnly.FromDateTime(DateTime.Today);
    DateOnly monday;
    DateOnly friday;
    Debrief? debrief = new();
    double[] appointmentData;

    double[] rentalData = new[] { 5.0 };
    double[] purchaseData = new[] { 2.0 };
    double[] contratData = new[] { 2.0 };

    protected override async System.Threading.Tasks.Task OnInitializedAsync()
    {
        monday = today.AddDays(-((int)today.DayOfWeek == 0 ? 6 : (int)today.DayOfWeek - 1));
        friday = monday.AddDays(4);
        var debriefs = await debriefService.GetDebriefByUserAsync(monday.ToDateTime(TimeOnly.MinValue), friday.ToDateTime(TimeOnly.MinValue), userInfo.Id);
        debrief = (debriefs != null && debriefs.Any()) ? debriefs.First() : null;

        caseClosedItems = !string.IsNullOrWhiteSpace(debrief?.CompletedBusiness)
            ? debrief.CompletedBusiness.Split('\n', StringSplitOptions.RemoveEmptyEntries).ToList()
            : new List<string>();

        ongoingCaseItems = !string.IsNullOrWhiteSpace(debrief?.BusinessInProgress)
            ? debrief.BusinessInProgress.Split('\n', StringSplitOptions.RemoveEmptyEntries).ToList()
            : new List<string>();

        var nbAppointmentsRealised = await userService.GetNbAppointmentsAsync(userInfo.Email, monday, today);
        var nbAppointmentsOnGoing = await userService.GetNbAppointmentsAsync(userInfo.Email, today, friday);
        appointmentData = new double[] { nbAppointmentsOnGoing, nbAppointmentsRealised };
    }

    private async System.Threading.Tasks.Task SaveBrief(bool isDraft)
    {
        Debrief debriefToSave;

        var existingDebriefs = await debriefService.GetDebriefByUserAsync(
            monday.ToDateTime(TimeOnly.MinValue),
            friday.ToDateTime(TimeOnly.MinValue),
            userInfo.Id
        );

        string? caseClosed = (caseClosedItems == null || !caseClosedItems.Any())
            ? null
            : string.Join("\n", caseClosedItems.Where(s => !string.IsNullOrWhiteSpace(s)));
        string? ongoingCase = (ongoingCaseItems == null || !ongoingCaseItems.Any())
            ? null
            : string.Join("\n", ongoingCaseItems.Where(s => !string.IsNullOrWhiteSpace(s)));

        if (existingDebriefs.Any())
        {
            debriefToSave = existingDebriefs.First();
            debriefToSave.BusinessInProgress = ongoingCase;
            debriefToSave.CompletedBusiness = caseClosed;
            debriefToSave.IsDraft = isDraft;

            await debriefService.UpdateDebriefAsync(debriefToSave);
            debrief = debriefToSave;
        }
        else
        {
            Debrief newDebrief = new()
            {
                UserId = userInfo.Id,
                BusinessInProgress = ongoingCase,
                CompletedBusiness = caseClosed,
                IsDraft = isDraft,
            };

            debrief = await debriefService.InsertDebriefAsync(newDebrief);
        }
    }

    private void AddCaseClosedItem()
    {
        if (!string.IsNullOrWhiteSpace(newCaseClosedItem))
        {
            caseClosedItems.Add(newCaseClosedItem.Trim());
            newCaseClosedItem = "";
        }
    }

    private void AddOngoingCaseItem()
    {
        if (!string.IsNullOrWhiteSpace(newOngoingCaseItem))
        {
            ongoingCaseItems.Add(newOngoingCaseItem.Trim());
            newOngoingCaseItem = "";
        }
    }

    private void RemoveItem(string type, int index)
    {
        if (type == "caseClosed" && index >= 0 && index < caseClosedItems.Count)
            caseClosedItems.RemoveAt(index);
        else if (type == "ongoingCase" && index >= 0 && index < ongoingCaseItems.Count)
            ongoingCaseItems.RemoveAt(index);
    }

    private void HandleKey(KeyboardEventArgs e, Action handler)
    {
        if (e.Key == "Enter") handler();
    }
}
