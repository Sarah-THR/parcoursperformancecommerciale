@using EcoleDeLaPerformance.Ui.Interfaces
@using EcoleDeLaPerformance.Ui.Models
@using EcoleDeLaPerformance.Ui.Services
@inject IFavoritesAgencyService favoritesAgencyService
@inject StateContainerService stateContainerService

<div class="px-6 my-6">
    <MudPaper Elevation="1" Class="p-4 mb-6">
        <MudStack AlignItems="AlignItems.Center" Spacing="1" Class="mb-4">
            <MudText Typo="Typo.h2" Color="Color.Secondary">Bienvenue,</MudText>
            <MudText Typo="Typo.h2" Color="Color.Secondary">Sélectionner vos agences favorites</MudText>
        </MudStack>
        <MudGrid Class="mt-6">
            <MudItem xs="12" md="4">
                <MudSelect SelectAll="true" SelectAllText="Selectionner toutes les agences" MultiSelection="true" @bind-Value="value" @bind-SelectedValues="options" T="string" Label="Agences" AdornmentIcon="@Icons.Material.Filled.Search">
                    @foreach (var agency in agencies)
                    {
                        <MudSelectItem Value="@agency">@agency</MudSelectItem>
                    }
                </MudSelect>
            </MudItem>
            <MudItem xs="12" md="8" Style="max-height:400px; overflow:auto">
                @if (options != null)
                {
                    @foreach (var option in options)
                    {
                        <MudChip T="string" Color="Color.Default" OnClose="() => Closed(option)" Value="option" IconColor="Color.Secondary">@option</MudChip>
                    }
                }
            </MudItem>
            <MudItem xs="12" Class="my-6 d-flex justify-content-center">
                <MudButton Variant="Variant.Filled" Color="Color.Secondary" OnClick="() => SaveSelectedAgenciesAsync(options.ToList())">Confirmer</MudButton>
            </MudItem>
        </MudGrid>

    </MudPaper>
</div>

@code {
    public User userInfo => stateContainerService.UserInfo;
    private string value { get; set; }
    private IEnumerable<string> options { get; set; }
    private bool multiselectionTextChoice;

    List<string> agencies;

    protected override void OnInitialized()
    {
        agencies = favoritesAgencyService.GetAgenciesAAD();
    }

    private async System.Threading.Tasks.Task SaveSelectedAgenciesAsync(List<string> selectedAgencies)
    {
        foreach (var agency in selectedAgencies)
        {
            var newAgency = new Models.FavoritesAgency()
            {
                UserId = userInfo.Id,
                AgencyName = agency,
            };
            await favoritesAgencyService.InsertFavoritesAgencyAsync(newAgency);
        }
    }

    async void Closed(string value)
    {
        options = options.Where(x => x != value);
        StateHasChanged();
    }
}
