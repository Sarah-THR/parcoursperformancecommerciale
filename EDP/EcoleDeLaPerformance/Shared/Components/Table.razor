@using EcoleDeLaPerformance.Ui.Interfaces
@using EcoleDeLaPerformance.Ui.Models
@inject IUserService userService
@inject IContractService contractService

<div class="mt-8">
   @*  @if (usersList != null || usersList.Count != 0)
    {
        <MudTable T="User" Items="@usersList" Hover="true" Breakpoint="Breakpoint.Sm" @ref="mudTable"
                  RowClass="cursor-pointer" OnRowClick="RowClickEvent" FixedHeader="true" Height="400px">
            <HeaderContent>
                <MudTh>Nom complet</MudTh>
                @if (userInfo.Role == "Superviseur")
                {
                    <MudTh>Superviseur</MudTh>
                }
                <MudTh>Entité/Site</MudTh>
                <MudTh>Période en cours</MudTh>
                <MudTh>Sauvegarde</MudTh>
                <MudTh>Maintenance</MudTh>
                <MudTh>Sécurité</MudTh>
                <MudTh>Compte en PRVLT</MudTh>
                <MudTh>CA généré</MudTh>
                <MudTh>Prime</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Nom complet">@context.FirstName @context.LastName</MudTd>
                @if (userInfo.Role == "Superviseur" && context.SupervisorNavigation != null)
                {
                    <MudTd DataLabel="Superviseur">@context.SupervisorNavigation.FirstName @context.SupervisorNavigation.LastName</MudTd>
                }
                <MudTd DataLabel="Entité/Site">@context.Entity</MudTd>
                <MudTd DataLabel="Période en cours">
                    N @GetPeriodNumber(context)
                </MudTd>
                @{
                    List<Goal> goalsList = GetGoals(GetPeriodNumber(context));
                }
                <MudTd DataLabel="Sauvegarde">
                    @if (goalsList.Count() != 0 && goalsList.Where(x => x.title == "Sauvegarde").Select(x => x.goal).First() != 0)
                    {
                        @GetContracts(context, "Sauvegarde")
                        <span>&nbsp;</span>
                        <img src="/images/@GoalsImageValue(goalsList.Where(x => x.title =="Sauvegarde").Select(x => x.goal).First(),"Save", context)" width="24px" />
                    }
                    else
                    {
                        <p>-</p>
                    }
                </MudTd>
                <MudTd DataLabel="Maintenance">
                    @if (goalsList.Count() != 0 && goalsList.Where(x => x.title == "Maintenance").Select(x => x.goal).First() != 0)
                    {
                        @GetContracts(context, "Maintenance")
                        <span>&nbsp;</span>
                        <img src="/images/@GoalsImageValue(goalsList.Where(x => x.title =="Maintenance").Select(x => x.goal).First(),"Maintenance", context)" width="24px" />
                    }
                    else
                    {
                        <p>-</p>
                    }
                </MudTd>
                <MudTd DataLabel="Sécurité">
                    @if (goalsList.Count() != 0 && goalsList.Where(x => x.title == "Sécurité").Select(x => x.goal).First() != 0)
                    {
                        @GetContracts(context, "Sécurité")
                        <span>&nbsp;</span>
                        <img src="/images/@GoalsImageValue(goalsList.Where(x => x.title =="Sécurité").Select(x => x.goal).First(),"Security", context)" width="24px" />
                    }
                    else
                    {
                        <p>-</p>
                    }
                </MudTd>
                <MudTd DataLabel="Compte en PRVLT">
                    @if (goalsList.Count() != 0 && goalsList.Where(x => x.title == "Ouverture de compte").Select(x => x.goal).First() != 0)
                    {
                        @GetNbOpenAccount(context)
                        <span>&nbsp;</span>
                        <img src="/images/@GoalsImageValue(goalsList.Where(x => x.title =="Ouverture de compte").Select(x => x.goal).First(),"OpenAccount", context)" width="24px" />
                    }
                    else
                    {
                        <p>-</p>
                    }
                </MudTd>
                <MudTd DataLabel="CA généré">
                    @GetTurnover(context).ToString("F") €
                </MudTd>
                <MudTd DataLabel="Prime">
                    @GetBonus(context).ToString("F") €
                </MudTd>
            </RowTemplate>
        </MudTable>
    } *@
</div>

@code {
    // [Parameter]
    // public User? userInfo { get; set; }

    // [Parameter]
    // public List<User>? usersList { get; set; }

    // [Parameter]
    // public EventCallback<User> onTableRowClick { get; set; }

    // private MudTable<User> mudTable;
    // private DateOnly currentDate = DateOnly.FromDateTime(DateTime.UtcNow);
    // private User? selectedItem;
    // int? period;
    // DateOnly periodFirstDay;
    // DateOnly periodLastDay;

    // private async Task RowClickEvent(TableRowClickEventArgs<User> tableRowClickEventArgs)
    // {
    //     if (tableRowClickEventArgs != null)
    //     {
    //         selectedItem = tableRowClickEventArgs.Item;
    //         await onTableRowClick.InvokeAsync(selectedItem);
    //     }
    // }
    // private List<Goal> GetGoals(int? period)
    // {
    //     List<Goal> goalsList = new List<Goal>();
    //     if (period == 1)
    //     {
    //         goalsList.Add(new Goal { title = "Sécurité", goal = 0 });
    //         goalsList.Add(new Goal { title = "Maintenance", goal = 0 });
    //         goalsList.Add(new Goal { title = "Sauvegarde", goal = 5 });
    //         goalsList.Add(new Goal { title = "Ouverture de compte", goal = 4 });
    //     }
    //     else if (period == 2)
    //     {
    //         goalsList.Add(new Goal { title = "Sécurité", goal = 0 });
    //         goalsList.Add(new Goal { title = "Maintenance", goal = 5 });
    //         goalsList.Add(new Goal { title = "Sauvegarde", goal = 2 });
    //         goalsList.Add(new Goal { title = "Ouverture de compte", goal = 2 });
    //     }
    //     else if (period == 3)
    //     {
    //         goalsList.Add(new Goal { title = "Sécurité", goal = 5 });
    //         goalsList.Add(new Goal { title = "Maintenance", goal = 1 });
    //         goalsList.Add(new Goal { title = "Sauvegarde", goal = 1 });
    //         goalsList.Add(new Goal { title = "Ouverture de compte", goal = 0 });
    //     };
    //     return goalsList;
    // }

    // private int? GetPeriodNumber(User user)
    // {
    //     var currentWeek = user.Weeks?.FirstOrDefault(week => week.StartDateWeek <= currentDate && currentDate < week.EndDateWeek);
    //     return currentWeek?.PeriodNumber;
    // }

    // public string GoalsImageValue(int goal, string type, User user)
    // {
    //     if (type == "OpenAccount")
    //     {
    //         int nbOpenAccounts = GetNbOpenAccount(user);

    //         return goal == nbOpenAccounts ? "FullBattery.png" :
    //        goal / 2 == nbOpenAccounts && nbOpenAccounts != 0 ? "MediumBattery.png" :
    //        goal < nbOpenAccounts ? "trophee.png" : "LowBattery.png";

    //     }
    //     else
    //     {
    //         int nbContracts = GetContracts(user, type);

    //         return goal == nbContracts ? "FullBattery.png" :
    //       (goal / 2 == nbContracts || goal / 2 <= nbContracts) && nbContracts != 0 ? "MediumBattery.png" :
    //       goal < nbContracts ? "trophee.png" : "LowBattery.png";

    //     }
    // }

    // public int GetNbOpenAccount(User user)
    // {
    //     int nbOpenAccounts;
    //     var currentWeek = user.Weeks.FirstOrDefault(week => week.StartDateWeek <= currentDate && currentDate < week.EndDateWeek);
    //     periodFirstDay = user.Weeks.Where(x => x.PeriodNumber == currentWeek.PeriodNumber).First().StartDateWeek;
    //     periodLastDay = user.Weeks.Where(x => x.PeriodNumber == currentWeek.PeriodNumber).Last().EndDateWeek;
    //     nbOpenAccounts = userService.GetNbOpenAccountsByPeriod(user.FirstName + " " + user.LastName.ToUpper(), periodFirstDay, periodLastDay);
    //     return nbOpenAccounts;
    // }

    // public decimal GetTurnover(User user)
    // {
    //     decimal turnover = 0;
    //     var currentWeek = user.Weeks.FirstOrDefault(week => week.StartDateWeek <= currentDate && currentDate < week.EndDateWeek);

    //     if (currentWeek != null)
    //     {
    //         periodFirstDay = user.Weeks.Where(x => x.PeriodNumber == currentWeek.PeriodNumber).First().StartDateWeek;
    //         periodLastDay = user.Weeks.Where(x => x.PeriodNumber == currentWeek.PeriodNumber).Last().EndDateWeek;

    //         turnover = Task.Run(async () => await userService.GetUserTurnover(user.EmailAdress, periodFirstDay, periodLastDay)).Result;
    //     }

    //     return turnover;
    // }

    // public decimal GetBonus(User user)
    // {
    //     decimal bonus = 0;
    //     var currentWeek = user.Weeks.FirstOrDefault(week => week.StartDateWeek <= currentDate && currentDate < week.EndDateWeek);

    //     if (currentWeek != null)
    //     {
    //         periodFirstDay = user.Weeks.Where(x => x.PeriodNumber == currentWeek.PeriodNumber).First().StartDateWeek;
    //         periodLastDay = user.Weeks.Where(x => x.PeriodNumber == currentWeek.PeriodNumber).Last().EndDateWeek;

    //         var turnover = Task.Run(async () => await userService.GetUserTurnover(user.EmailAdress, periodFirstDay, periodLastDay)).Result;
    //         bonus = Math.Round(turnover / 12, 2);
    //     }

    //     return bonus;
    // }

    // public int GetContracts(User user, string type)
    // {
    //     int nbContracts;
    //     var currentWeek = user.Weeks.FirstOrDefault(week => week.StartDateWeek <= currentDate && currentDate < week.EndDateWeek);
    //     periodFirstDay = user.Weeks.Where(x => x.PeriodNumber == currentWeek.PeriodNumber).First().StartDateWeek;
    //     periodLastDay = user.Weeks.Where(x => x.PeriodNumber == currentWeek.PeriodNumber).Last().EndDateWeek;
    //     var contracts = contractService.GetContractsByPeriod(user.FirstName + " " + user.LastName.ToUpper(), periodFirstDay, periodLastDay);

    //     if (type == "Sécurité")
    //     {
    //         nbContracts = contracts.Where(x => x.Sécurité == "OUI").Count();
    //     }
    //     else if (type == "Maintenance")
    //     {
    //         nbContracts = contracts.Where(x => x.Maintenance == "OUI").Count();
    //     }
    //     else
    //     {
    //         nbContracts = contracts.Where(x => x.Sauvegarde == "OUI").Count();
    //     }

    //     return nbContracts;
    // }
}
