@inherits LayoutComponentBase
@using EcoleDeLaPerformance.Ui.Interfaces
@using EcoleDeLaPerformance.Ui.Models
@using EcoleDeLaPerformance.Ui.Services
@using EcoleDeLaPerformance.Ui.Shared.Components
@inject NavigationManager navigationManager
@inject StateContainerService stateContainerService
@inject AuthenticationStateProvider authenticationStateProvider;
@inject IUserService userService
@inject IJSRuntime JsRuntime

<PageTitle>Parcours Performance Commerciale</PageTitle>
<MudThemeProvider Theme="_currentTheme" />
<MudDialogProvider />
<MudSnackbarProvider />
<MudPopoverProvider />

<div>
    <CascadingAuthenticationState>
        <AuthorizeView>
            <Authorized>
                @if (isInitialized)
                {
                    @if (unknowUser)
                    {
                        <UnknowUser />
                    }
                    else
                    {
                        <CascadingValue Value="@stateContainerService.UserInfo">
                            <MudLayout>
                                <MudPaper Elevation="0" Class="px-6 py-2 border-bottom" Style="background-color: white; position: fixed; top: 0; width: 100%; z-index: 1100;">
                                    <MudGrid Class="align-items-center" Justify="Justify.SpaceBetween">
                                        <MudItem xs="12" md="6">
                                            <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="2">
                                                <MudImage Src="/images/Logo.png" Width="150" />
                                                <MudText Class="text-slate-800 fw-bold pt-1">Parcours Performance Commerciale</MudText>
                                            </MudStack>
                                        </MudItem>

                                        <MudItem xs="12" md="6">
                                            <MudStack Row="true" AlignItems="AlignItems.Center" Justify="Justify.FlexEnd" Spacing="2">
                                                <MudAvatar>
                                                    @if (stateContainerService.UserInfo.ProfilePicturePath != null)
                                                    {
                                                        <MudImage Src="@stateContainerService.UserInfo.ProfilePicturePath"></MudImage>
                                                    }
                                                    else
                                                    {
                                                        <MudIcon Icon="@Icons.Material.Filled.PhotoCamera" />
                                                    }
                                                </MudAvatar>
                                                <MudMenu Label="@stateContainerService.UserInfo.Name" EndIcon="@Icons.Material.Filled.KeyboardArrowDown" Class="font-medium text-slate-700">
                                                    <MudMenuItem Label="Profil" OnClick='() => navigationManager.NavigateTo("/profile")' />
                                                    <MudMenuItem Label="Déconnexion" OnClick='() => navigationManager.NavigateTo("MicrosoftIdentity/Account/SignOut", forceLoad: true)' />
                                                </MudMenu>
                                            </MudStack>
                                        </MudItem>
                                    </MudGrid>
                                </MudPaper>
                                <div class="d-flex">
                                    <MudDrawer Elevation="0" Width="128px" Class="drawer-fixed border-end" Open="true" Anchor="Anchor.Start" Variant="DrawerVariant.Persistent">
                                        <MudNavMenu Class="p-2">
                                            <AuthorizedPolicyView Policy="AdminOrCommercialOrDirecteurPolicy">
                                                <MudNavLink Href="/" Match="NavLinkMatch.All" Icon="@Icons.Material.Outlined.Home" Class="linkmenu">
                                                    Accueil
                                                </MudNavLink>
                                                <MudNavLink Href="/planning" Icon="@Icons.Material.Outlined.CalendarMonth" Class="linkmenu">
                                                    Activitées
                                                </MudNavLink>
                                                <MudNavLink Href="/brief" Icon="@Icons.Material.Outlined.Message" Class="linkmenu">
                                                    Brief/Debrief
                                                </MudNavLink>
                                            </AuthorizedPolicyView>
                                            <AuthorizedPolicyView Policy="AdminOrCommercialPolicy">
                                                <MudNavLink Href="/formation" Icon="@Icons.Material.Outlined.Assignment" Class="linkmenu">
                                                    Suivi de formation
                                                </MudNavLink>
                                            </AuthorizedPolicyView>
                                            <AuthorizedPolicyView Policy="AdminOrCommercialOrDirecteurPolicy">
                                                <MudNavLink Href="/history" Icon="@Icons.Material.Outlined.History" Class="linkmenu">
                                                    Historique
                                                </MudNavLink>
                                            </AuthorizedPolicyView>
                                            <AuthorizedPolicyView Policy="AdminOrSuperviseurOrDirecteurPolicy">
                                                <MudNavLink Href="/commercials" Icon="@Icons.Material.Outlined.Groups" Class="linkmenu">
                                                    Gérer mon équipe
                                                </MudNavLink>
                                            </AuthorizedPolicyView>
                                            <MudNavLink Href="/supports" Icon="@Icons.Material.Outlined.AutoStories" Class="linkmenu">
                                                Supports
                                            </MudNavLink>
                                            <AuthorizedPolicyView Policy="AdminOnly">
                                                <MudNavLink Href="/users" Icon="@Icons.Material.Outlined.People" Class="linkmenu">
                                                    Utilisateurs
                                                </MudNavLink>
                                                <MudNavLink Href="/managecontent" Icon="@Icons.Material.Filled.InstallDesktop" Class="linkmenu">
                                                    Gérer le contenu
                                                </MudNavLink>
                                            </AuthorizedPolicyView>
                                            <MudText Class="p-4">
                                                v.@version
                                            </MudText>
                                        </MudNavMenu>
                                    </MudDrawer>
                                </div>
                                <MudMainContent>
                                    @Body
                                </MudMainContent>
                            </MudLayout>
                        </CascadingValue>
                    }
                }
            </Authorized>
            <NotAuthorized>
                <LandingPage />
            </NotAuthorized>
        </AuthorizeView>
    </CascadingAuthenticationState>
</div>

@code {
    private readonly MudTheme _currentTheme = new()
    {
        PaletteLight = new PaletteLight
        {
            Primary = "rgba(10, 50, 78, 1)",
            Secondary = "#E10600",
        }
    };
    bool open = true;
    string version;
    private bool unknowUser { get; set; }
    private bool isInitialized { get; set; }
    private int screenSize;
    private bool userInfoLoaded = false;

    void ToggleDrawer()
    {
        open = !open;
    }

    protected override void OnInitialized()
    {
        version = GetType().Assembly.GetName().Version.ToString();
        open = true;
        base.OnInitialized();
    }

    protected override async System.Threading.Tasks.Task OnAfterRenderAsync(bool firstRender)
    {
        try
        {
            if (!userInfoLoaded)
            {
                var authState = await authenticationStateProvider.GetAuthenticationStateAsync();
                if (authState.User?.Identity?.IsAuthenticated ?? false)
                {
                    try
                    {
                        stateContainerService.UserInfo = await userService.GetUserByEmailAsync(authState.User.Identity.Name);

                        if (stateContainerService.UserInfo == null)
                        {
                            unknowUser = true;
                        }
                    }
                    catch (Exception ex)
                    {
                        unknowUser = true;
                    }

                    isInitialized = true;
                    userInfoLoaded = true;
                }

                screenSize = await JsRuntime.InvokeAsync<int>("BlazorScreenSize.getScreenSize");
            }

            StateHasChanged();
        }
        catch (Exception ex)
        {
            throw ex;
        }
    }
}
