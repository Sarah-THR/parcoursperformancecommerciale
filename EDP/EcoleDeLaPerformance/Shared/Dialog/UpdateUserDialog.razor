@using EcoleDeLaPerformance.Ui.Interfaces
@using EcoleDeLaPerformance.Ui.Models
@using EcoleDeLaPerformance.Ui.Shared.Components
@using System.ComponentModel.DataAnnotations
@inject ISnackbar snackbar
@inject IUserService userService

<MudDialog>
    <DialogContent>
        <MudForm @ref="form" Model="model">
            <MudGrid>
                <MudItem md="4" lg="4" sm="12">
                    <MudTextField Label="Email"
                                  @bind-Value="model.Email" For="@(() => model.Email)" Validation="@(new EmailAddressAttribute() { ErrorMessage = "Veuillez saisir une adresse email valide" })" Required RequiredError="Email obligatoire !" />
                </MudItem>
                <MudItem md="4" lg="4" sm="12">
                    <MudTextField Label="Nom"
                                  @bind-Value="model.Name" For="@(() => model.Name)" Required RequiredError="Nom obligatoire !" />
                </MudItem>
                <MudItem md="4" lg="4" sm="12">
                    <MudTextField Label="Entité/Site"
                                  @bind-Value="model.Entity" For="@(() => model.Entity)" Required RequiredError="Entité/Site obligatoire !" />
                </MudItem>

                <MudItem md="4" lg="4" sm="12">
                    <MudSelect T="string" Label="Role" Dense="true" @bind-Value="selectedRole" Clearable Required RequiredError="Role obligatoire !">
                        @foreach (var role in roleList)
                        {
                            <MudSelectItem Value="@role" />
                        }
                    </MudSelect>
                </MudItem>

                <MudItem md="4" lg="4" sm="12">
                    <MudSelect T="string" Label="Manager" Dense="true" TextChanged="() => SelectSupervisor(selectedSupervisor)" @bind-Value="selectedSupervisor" Clearable Required RequiredError="Manager obligatoire !">
                        @{
                            foreach (var supervisor in supervisorList)
                            {
                                <MudSelectItem Value="@(supervisor.ToUpper())" />
                            }
                        }
                    </MudSelect>
                </MudItem>
                    <MudItem md="4" lg="4" sm="12">
                    <MudDatePicker Label="Date début suivi" @bind-Date="StartFollowUpDateTime" ReadOnly Disabled />
                    </MudItem>
                    <MudItem md="4" lg="4" sm="12">
                    <MudDatePicker Label="Date fin de suivi" @bind-Date="EndFollowUpDateTime" ReadOnly Disabled />
                    </MudItem>
            </MudGrid>
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton Color="Color.Secondary" Variant="Variant.Filled" OnClick="Confirm">Valider</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] IMudDialogInstance mudDialog { get; set; }

    [Parameter]
    public User studentInfo { get; set; }

    [Parameter]
    public User userInfo { get; set; }

    User model = new User();
    private MudForm form;
    public string? selectedRole { get; set; }
    public string? selectedSupervisor;
    public List<string> roleList { get; } = new List<string> { "Commercial junior", "Commercial senior", "Manager", "Superviseur" };
    public List<string> supervisorList = new List<string>();
    public List<User> usersList = new List<User>();
    public DateTime? StartFollowUpDateTime
    {
        get => model.StartFollowUp?.ToDateTime(TimeOnly.MinValue);
        set => model.StartFollowUp = value.HasValue ? DateOnly.FromDateTime(value.Value) : null;
    }
    public DateTime? EndFollowUpDateTime
    {
        get => model.EndFollowUp?.ToDateTime(TimeOnly.MinValue);
        set => model.EndFollowUp = value.HasValue ? DateOnly.FromDateTime(value.Value) : null;
    }

    protected override async System.Threading.Tasks.Task OnInitializedAsync()
    {
        model = studentInfo;
        if (studentInfo.Supervisor != null)
        {
            selectedSupervisor = studentInfo.Supervisor.Name;
        }

        usersList = await userService.GetUsersAsync();
        supervisorList = usersList.Where(x => x.DeletedAt == null).Select(x => x.Name).ToList();
    }

    private async System.Threading.Tasks.Task SelectSupervisor(string value)
    {
        selectedSupervisor = value;
        StateHasChanged();
    }

    public async void Confirm()
    {
        try
        {
            await form.Validate();
            if (form.IsValid)
            {
                await userService.UpdateUserAsync(model);
                snackbar.Add("Les informations de l'utilisateur ont bien été modifiées !", Severity.Success);
                mudDialog.Close(DialogResult.Ok(true));
            }
            else
            {
                snackbar.Add("Veuillez remplir les champs obligatoires !", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            snackbar.Add($"Erreur lors de l'enregistrement des modifications : {ex.Message}", Severity.Error);
            SentrySdk.CaptureException(ex);
        }
        StateHasChanged();
    }
}
