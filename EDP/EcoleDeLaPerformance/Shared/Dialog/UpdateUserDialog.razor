@using EcoleDeLaPerformance.Ui.Interfaces
@using EcoleDeLaPerformance.Ui.Models
@using EcoleDeLaPerformance.Ui.Shared.Components
@using System.ComponentModel.DataAnnotations
@inject ISnackbar snackbar
@inject IUserService userService
@inject IRoleService roleService
@inject IGradeService gradeService

@if (isInitialized)
{
    <MudDialog>
        <DialogContent>
            <MudForm @ref="form" Model="model">
                <MudGrid>
                    <MudItem md="4" lg="4" sm="12">
                        <MudTextField Label="Email"
                                      @bind-Value="model.Email" For="@(() => model.Email)" Validation="@(new EmailAddressAttribute() { ErrorMessage = "Veuillez saisir une adresse email valide" })" Required RequiredError="Email obligatoire !" />
                    </MudItem>
                    <MudItem md="4" lg="4" sm="12">
                        <MudTextField Label="Nom"
                                      @bind-Value="model.Name" For="@(() => model.Name)" Required RequiredError="Nom obligatoire !" />
                    </MudItem>
                    <MudItem md="4" lg="4" sm="12">
                        <MudTextField Label="Entité/Site"
                                      @bind-Value="model.Entity" For="@(() => model.Entity)" Required RequiredError="Entité/Site obligatoire !" />
                    </MudItem>

                    <MudItem md="4" lg="4" sm="12">
                        <MudSelect T="string" Label="Role" Dense="true" @bind-Value="selectedRole" Clearable Required RequiredError="Role obligatoire !">
                            @foreach (var role in roleList)
                            {
                                <MudSelectItem Value="@role.Id.ToString()">@role.Name</MudSelectItem>
                            }
                        </MudSelect>
                    </MudItem>
                    @if (roleList.Where(x => x.Id == Convert.ToInt32(selectedRole)).Select(x => x.Name).FirstOrDefault() == "Commercial")
                    {
                        <MudItem md="4" lg="4" sm="12">
                            <MudSelect T="string" Label="Statut" Dense="true" @bind-Value="selectedGrade" Clearable Required RequiredError="Statut obligatoire !">
                                @foreach (var grade in gradeList)
                                {
                                    <MudSelectItem Value="@grade.Id.ToString()">@grade.Name</MudSelectItem>
                                }
                            </MudSelect>
                        </MudItem>
                        <MudItem md="4" lg="4" sm="12">
                            <MudSelect T="string" Label="Directeur" Dense="true" TextChanged="() => SelectDirector(selectedDirector)" @bind-Value="selectedDirector" Clearable Required RequiredError="Directeur obligatoire !">
                                @{
                                    if (directorList != null && directorList.Count != 0)
                                    {
                                        foreach (var director in directorList)
                                        {
                                            <MudSelectItem Value="@director.Id.ToString()">@(director.Name.ToUpper())</MudSelectItem>
                                        }
                                    }
                                }
                            </MudSelect>
                        </MudItem>
                        <MudItem md="4" lg="4" sm="12">
                            <MudDatePicker Label="Date début suivi" @bind-Date="StartFollowUpDateTime" ReadOnly Disabled />
                        </MudItem>
                    }
                </MudGrid>
            </MudForm>
        </DialogContent>
        <DialogActions>
            <MudButton Color="Color.Secondary" Variant="Variant.Filled" OnClick="Confirm">Valider</MudButton>
        </DialogActions>
    </MudDialog>
}

@code {
    [CascadingParameter] IMudDialogInstance mudDialog { get; set; }

    [Parameter]
    public User studentInfo { get; set; }

    [Parameter]
    public User userInfo { get; set; }

    User model = new User();
    private MudForm form;
    public string? selectedRole { get; set; }
    public string? selectedGrade { get; set; }
    public string? selectedDirector;
    public List<Role> roleList;
    public List<Grade> gradeList;
    public List<User> directorList = new List<User>();
    public List<User> usersList = new List<User>();
    public DateTime? StartFollowUpDateTime
    {
        get => model.StartFollowUp?.ToDateTime(TimeOnly.MinValue);
        set => model.StartFollowUp = value.HasValue ? DateOnly.FromDateTime(value.Value) : null;
    }
    private bool isInitialized { get; set; }

    protected override async System.Threading.Tasks.Task OnInitializedAsync()
    {
        model = studentInfo;
        if (studentInfo.Supervisor != null)
        {
            selectedDirector = studentInfo.Supervisor.Id.ToString();
            selectedGrade = studentInfo.Grade.Id.ToString();
        }
        selectedRole = studentInfo.Role.Id.ToString();

        usersList = await userService.GetUsersAsync();
        roleList = await roleService.GetRolesAsync();
        gradeList = await gradeService.GetGradesAsync();
        directorList = usersList.Where(x => x.DeletedAt == null && x.Role.Name == "Directeur").ToList();
        isInitialized = true;
    }

    private async System.Threading.Tasks.Task SelectDirector(string value)
    {
        selectedDirector = value;
        StateHasChanged();
    }

    public async void Confirm()
    {
        try
        {
            await form.Validate();
            if (form.IsValid)
            {
                User newUser = new User()
                {
                    Id = model.Id,
                    Email = model.Email,
                    Name = model.Name,
                    Entity = model.Entity,
                    RoleId = Convert.ToInt32(selectedRole),
                };
                if (roleList.Where(x => x.Id == Convert.ToInt32(selectedRole)).Select(x => x.Name).FirstOrDefault() == "Commercial")
                {
                    newUser.DirectorId = Convert.ToInt32(selectedDirector);
                    newUser.GradeId = Convert.ToInt32(selectedGrade);
                    newUser.StartFollowUp = DateOnly.FromDateTime(StartFollowUpDateTime.Value);
                }
                await userService.UpdateUserAsync(newUser);
                snackbar.Add("Les informations de l'utilisateur ont bien été modifiées !", Severity.Success);
                mudDialog.Close(DialogResult.Ok(true));
            }
            else
            {
                snackbar.Add("Veuillez remplir les champs obligatoires !", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            snackbar.Add($"Erreur lors de l'enregistrement des modifications : {ex.Message}", Severity.Error);
            SentrySdk.CaptureException(ex);
        }
        StateHasChanged();
    }
}
