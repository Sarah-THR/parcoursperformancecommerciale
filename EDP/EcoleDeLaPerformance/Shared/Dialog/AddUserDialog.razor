@using EcoleDeLaPerformance.Ui.Helper
@using EcoleDeLaPerformance.Ui.Interfaces
@using EcoleDeLaPerformance.Ui.Models
@using EcoleDeLaPerformance.Ui.Shared.Components
@using System.ComponentModel.DataAnnotations
@inject ISnackbar snackbar
@inject IUserService userService
@inject MailHelper mailHelper

<MudDialog>
    <DialogContent>
        <MudForm @ref="form" Model="model">
            <MudGrid>
                <MudItem md="4" lg="4" sm="12">
                    <MudTextField Label="Email" Immediate="true"
                                  @bind-Value="model.Email" For="@(() => model.Email)" Validation="@(new EmailAddressAttribute() { ErrorMessage = "Veuillez saisir une adresse email valide" })" Required RequiredError="Email obligatoire !" TextChanged="() => HandleSearchChange(model.Email)" />
                </MudItem>
                <MudItem md="4" lg="4" sm="12">
                    <MudTextField Label="Nom"
                                  @bind-Value="model.Name" For="@(() => model.Name)" Required RequiredError="Prénom Nom obligatoire !" />
                </MudItem>
                <MudItem md="4" lg="4" sm="12">
                    <MudTextField Label="Entité/Site"
                                  @bind-Value="model.Entity" For="@(() => model.Entity)" Required RequiredError="Entité/Site obligatoire !" />
                </MudItem>
                <MudItem md="4" lg="4" sm="12">
                    <MudSelect T="string" Label="Role" Dense="true" @bind-Value="selectedRole" Clearable Required RequiredError="Role obligatoire !">
                        @foreach (var role in roleList)
                        {
                            <MudSelectItem Value="@role">@role</MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>
                <MudItem md="4" lg="4" sm="12">
                    <MudSelect T="string" Label="Manager" Dense="true" TextChanged="() => SelectSupervisor(selectedSupervisor)" @bind-Value="selectedSupervisor" Clearable Required RequiredError="Manager obligatoire !">
                        @{
                            if (supervisorList != null && supervisorList.Count != 0)
                            {
                                foreach (var supervisor in supervisorList)
                                {
                                    <MudSelectItem Value="@(supervisor.ToUpper())" />
                                }
                            }
                        }
                    </MudSelect>
                </MudItem>
                <MudItem md="4" lg="4" sm="12">
                    <MudDatePicker Label="Date début suivi" @bind-Date="startDate" TextChanged="DatePickerTextChanged" Required RequiredError="Date obligatoire !" />
                </MudItem>
                <MudItem md="4" lg="4" sm="12">
                    <MudDatePicker Label="Date fin de suivi" @bind-Date="endDate" For="@(() => endDate)" Disabled ReadOnly />
                </MudItem>
            </MudGrid>
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton Color="Color.Secondary" Variant="Variant.Filled" OnClick="Confirm">Valider</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] IMudDialogInstance mudDialog { get; set; }

    [Parameter]
    public User userInfo { get; set; }

    User model = new User();
    private MudForm form;
    public string? selectedRole { get; set; }
    public string? selectedSupervisor;
    DateTime? startDate = null;
    public DateTime? endDate;
    public List<string> roleList { get; } = new List<string> { "Commercial", "Directeur", "Superviseur" };
    public List<string> supervisorList = new List<string>();
    public List<User> usersList = new List<User>();

    protected override async System.Threading.Tasks.Task OnInitializedAsync()
    {
        usersList = await userService.GetUsersAsync();
        supervisorList = usersList.Where(x => x.DeletedAt == null).Select(x => x.Name).ToList();
    }

    private async System.Threading.Tasks.Task SelectSupervisor(string value)
    {
        selectedSupervisor = value;
        StateHasChanged();
    }

    private void DatePickerTextChanged(string value)
    {
        if (value == null || value.Length < 6)
        {
            endDate = null;
        }
        else
        {
            startDate = Convert.ToDateTime(value);
            endDate = startDate?.AddMonths(6);
        }
    }

    async System.Threading.Tasks.Task HandleSearchChange(string value)
    {
        try
        {
            if (!string.IsNullOrEmpty(value))
            {
                var user = userService.GetUserAAD(model.Email);
                if (user != null)
                {
                    model.Name = user.Name;
                    model.Entity = user.Entity;
                }
            }
            else
            {
                model.Name = null;
                model.Entity = null;
            }
            StateHasChanged();
        }
        catch (Exception ex)
        {
            snackbar.Add($"Erreur lors de la recherche d'un utilisateur: {ex.Message}", Severity.Error);
            SentrySdk.CaptureException(ex);
        }
    }

    public async void Confirm()
    {
        try
        {
            await form.Validate();
            if (form.IsValid)
            {
                User? supervisor = usersList.Where(x => (x.Name.ToUpper()) == selectedSupervisor).First();
                User newUser = new User()
                {
                    Email = model.Email,
                    Name = model.Name,
                    Entity = model.Entity,
                    StartFollowUp = DateOnly.FromDateTime(startDate.Value),
                };

                await userService.InsertUserAsync(newUser);
                mailHelper.SendMailNewAccount(newUser.Email, (newUser.Name), (userInfo.Name), userInfo.Email);
                snackbar.Add("L'utilisateur a bien été créé !", Severity.Success);
                mudDialog.Close(DialogResult.Ok(true));
            }
            else
            {
                snackbar.Add("Veuillez remplir les champs obligatoires !", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            snackbar.Add($"Erreur lors de l'enregistrement de l'utilisateur : {ex.Message}", Severity.Error);
            SentrySdk.CaptureException(ex);
        }
        StateHasChanged();
    }
}
