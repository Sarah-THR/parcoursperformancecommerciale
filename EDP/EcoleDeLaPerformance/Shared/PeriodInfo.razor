@using EcoleDeLaPerformance.Ui.Interfaces
@using EcoleDeLaPerformance.Ui.Models
@using EcoleDeLaPerformance.Ui.Services
@using EcoleDeLaPerformance.Ui.Shared.Components
@inject StateContainerService stateContainerService
@inject IConfiguration configuration
@inject IBriefService briefNoteService;
@inject IUserService userService
@inject IContractService contractService

<div class="d-flex justify-content-center mt-8">
   @*  @if (isInitialized)
    {
        <MudGrid Justify="Justify.Center">
            <MudItem sm="12" md="12" lg="6" Class="w-100">
                <MudPaper Class="d-flex flex-column align-items-start py-8 px-4" Elevation="3" Height="170px">
                    <h3>Objectif période en cours <img src="/images/target.png" class="ms-2" width="30px" /></h3>
                    <h6 class="mt-4">@goal</h6>
                </MudPaper>
            </MudItem>
            <MudItem sm="12" md="12" lg="3" Class="w-100">
                <MudPaper Class="d-flex flex-column py-8 px-4" Elevation="3" Height="170px">
                    <MudGrid Justify="Justify.SpaceAround">
                        <MudItem sm="12" md="8" lg="8" Class="w-100">
                            <h3>CA généré</h3>
                            <h1><strong>@turnover.ToString("F") €</strong></h1>
                        </MudItem>
                        <MudItem sm="12" md="4" lg="4" Class="w-100">
                            <img src="/images/money.png" width="100%" />
                        </MudItem>
                    </MudGrid>
                </MudPaper>
            </MudItem>
            <MudItem sm="12" md="12" lg="3" Class="w-100">
                <MudPaper Class="d-flex flex-column py-8 px-4" Elevation="3" Height="170px">
                    <MudGrid Justify="Justify.SpaceAround">
                        <MudItem sm="12" md="8" lg="8" Class="w-100">
                            <h3>
                                Prime
                                <MudTooltip Text="Estimation des primes avant validation définitive.">
                                    <MudIconButton Icon="@Icons.Material.Filled.Info" Size="Size.Small" />
                                </MudTooltip>
                            </h3>
                            <h1><strong>@bonus €</strong></h1>
                        </MudItem>
                        <MudItem sm="12" md="4" lg="4" Class="w-100">
                            <img src="/images/trophee.png" width="100%" />
                        </MudItem>
                    </MudGrid>
                </MudPaper>
            </MudItem>
                <MudItem sm="12" md="12" lg="12" Class="mt-5 w-100">
                    <MudPaper Class="py-8 px-4" Elevation="3">
                        <h3><img src="/images/Calendar.png" class="ms-2" width="30px" /> Semaine</h3>
                        <Planning halfDayPlanningsList="halfDayPlanningsList" />
                    </MudPaper>
                </MudItem>
            @if (!summary)
            {
                <MudItem sm="12" md="12" lg="12" Class="mt-4 w-100">
                    <MudPaper Class="py-8 px-4" Elevation="3">
                        <h3>Chiffres de la période en cours <img src="/images/chart.png" width="30px" class="mb-3" /></h3>
                        <MudGrid Justify="Justify.SpaceAround" class="mt-5">
                            <MudItem sm="12" md="12" lg="3" Class="w-100">
                                @if (contractsList != 0)
                                {
                                    <DonutChart crmDataList="contractsListForDonutChart" title="Contrats" legend="true" />
                                }
                                else
                                {
                                    <h4 class="fw-bold">Contrats</h4>
                                    <h4 class="pt-5" style="font-size:40px">0</h4>
                                }
                            </MudItem>
                            <MudItem sm="12" md="12" lg="3" Class="w-100">
                                @if (meetingsList.First().Amount != 0)
                                {
                                    <DonutChart title="Rendez-vous à venir" crmDataList="meetingsList" legend="false" briefNote="@meetingsBriefNote" />
                                    <h4 class="fw-bold">Rendez-vous à venir</h4>
                                    <h4 class="pt-5" style="font-size:40px">@meetingsList.First().Amount</h4>
                                }
                                else
                                {
                                    <h4 class="fw-bold">Rendez-vous à venir</h4>
                                    <h4 class="pt-5" style="font-size:40px">0</h4>
                                }
                            </MudItem>
                            <MudItem sm="12" md="12" lg="3" Class="w-100">
                                @if (openAccounts.Amount != 0)
                                {
                                    <Speedometer crmData="openAccounts" title="Ouvertures de comptes" maxValue="6" />
                                }
                                else
                                {
                                    <h4 class="fw-bold">Ouvertures de comptes</h4>
                                    <h4 class="pt-5" style="font-size:40px">0</h4>
                                }
                            </MudItem>
                        </MudGrid>
                    </MudPaper>
                </MudItem>
                <MudItem sm="12" md="12" lg="6" Class="w-100">
                    <MudPaper Class="d-flex flex-column py-8 px-4 overflow-scroll" Elevation="3" Height="300px">
                        <h3 class="d-flex align-items-start"><img src="/images/chart.png" width="30px" class="me-2" /> Engagement de signature de la semaine</h3>
                        <MudList Clickable="false" Dense="false">
                            @foreach (var commitment in commitmentList)
                            {
                                <MudListItem Text="@commitment" Icon="@Icons.Material.Filled.ArrowRight" IconColor="Color.Primary" IconSize="Size.Large" Style="word-wrap:break-word;" />
                            }
                        </MudList>
                    </MudPaper>
                </MudItem>
                <MudItem sm="12" md="12" lg="6" Class="w-100">
                    <MudPaper Class="d-flex flex-column py-8 px-4 overflow-scroll" Elevation="3" Height="300px">
                        <h3 class="d-flex align-items-start"><img src="/images/folder.png" width="30px" class="me-2" /> Dossiers à checker </h3>
                        <MudList Clickable="false" Dense="false">
                            @foreach (var fileToCheck in fileToCheckList)
                            {
                                <MudListItem Text="@fileToCheck" Icon="@Icons.Material.Filled.ArrowRight" IconColor="Color.Primary" IconSize="Size.Large" Style="word-wrap:break-word;" />
                            }
                        </MudList>
                    </MudPaper>
                </MudItem>
            }
            else
            {
                <MudItem sm="12" md="12" lg="12" Class="mt-4 w-100">
                    <MudGrid Justify="Justify.SpaceAround" Class="mt-5">
                        <MudItem sm="12" md="12" lg="3" Class="w-100">
                            @if (meetingsList.First().Amount != 0)
                            {
                                <DonutChart title="Rendez-vous à venir" crmDataList="meetingsList" legend="false" briefNote="@meetingsBriefNote" />
                                <h4 class="fw-bold">Rendez-vous à venir</h4>
                                <h4 class="pt-5" style="font-size:40px">@meetingsList.First().Amount</h4>
                            }
                            else
                            {
                                <h3 class="fw-bold">Rendez-vous à venir</h3>
                                <h3 class="fw-bold">0</h3>
                            }
                        </MudItem>
                        <MudItem sm="12" md="12" lg="3" Class="w-100">
                            @if (openAccounts.Amount != 0)
                            {
                                <Speedometer crmData="openAccounts" title="Ouvertures de comptes" maxValue="6" />
                            }
                            else
                            {
                                <h3 class="fw-bold">Ouvertures de comptes</h3>
                                <h3 class="fw-bold">0</h3>
                            }
                        </MudItem>
                    </MudGrid>
                </MudItem>
                <MudItem xs="12" Class="pt-16">
                    <MudPaper Elevation="3">
                        <MudItem Class="pa-5">
                            <MudGrid>
                                <MudItem>
                                    <MudImage Src="/images/Dossier.png" Width="40" />
                                </MudItem>
                                <MudItem>
                                    <MudText Typo="Typo.h6" Color="Color.Primary" Class="text-uppercase">
                                        Dossiers et contrats signés
                                    </MudText>
                                </MudItem>
                            </MudGrid>
                            <MudGrid>
                                <MudItem xs="4">
                                    <Speedometer crmData="new CRMData{Amount = nexleaseContractList}" maxValue="6" title="Location :" />
                                </MudItem>
                                <MudItem xs="4">
                                    <Speedometer crmData="new CRMData{Amount = saleContractList}" maxValue="6" title="Achat :" />
                                </MudItem>
                                <MudItem xs="4">
                                    <Speedometer crmData="new CRMData{Amount = contractsList}" maxValue="6" title="Contrats :" />
                                </MudItem>
                            </MudGrid>
                        </MudItem>
                    </MudPaper>
                </MudItem>
            }

        </MudGrid>
    }
    else
    {
        <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
    } *@
</div>

@code {
    // [Parameter]
    // public int period { get; set; }

    // [Parameter]
    // public Week currentWeek { get; set; }

    // [Parameter]
    // public User userInfo { get; set; }

    // [Parameter]
    // public bool summary { get; set; } = false;

    // HttpClient httpClient = new HttpClient();
    // SalesUpService salesUpService;

    // private bool isInitialized { get; set; }
    // string goal;
    // int contractsList = 0;
    // List<CRMData> contractsListForDonutChart = new List<CRMData>();
    // List<CRMData> meetingsList = new List<CRMData>();
    // CRMData openAccounts = new CRMData();
    // // string meetingsBriefNote;
    // public decimal turnover;
    // List<HalfDayPlanning> halfDayPlanningsList = new List<HalfDayPlanning>();
    // public List<string> commitmentList = new List<string>();
    // public List<string> fileToCheckList = new List<string>();
    // int saleContractList = 0;
    // int nexleaseContractList = 0;
    // public decimal bonus;
    // string salesUpToken;

    // protected override async Task OnInitializedAsync()
    // {
    //     #region Period
    //     if (period == 1)
    //     {
    //         goal = "5 contrats SAUVEGARDE + 4 ouvertures de compte PRVLT";
    //     }
    //     else if (period == 2)
    //     {
    //         goal = "5 contrats MAINTENANCE + 2 contrats sauvegarde + 2 ouvertures de compte PRVLT";
    //     }
    //     else if (period == 3)
    //     {
    //         goal = "5 contrats SÉCURITÉ + 1 contrat MAINTENANCE + 1 contrat SAUVEGARDE";
    //     };
    //     #endregion

    //     var periodFirstDay = userInfo.Weeks.Where(x => x.PeriodNumber == period).First().StartDateWeek;
    //     var periodLastDay = userInfo.Weeks.Where(x => x.PeriodNumber == period).Last().EndDateWeek;

    //     var studentName = (userInfo.FirstName + " " + userInfo.LastName);
    //     contractsList = contractService.GetNbContractsByUser(studentName, periodFirstDay, periodLastDay);
    //     saleContractList = contractService.GetNbContractsSaleByUser(studentName, currentWeek.StartDateWeek, currentWeek.EndDateWeek);
    //     nexleaseContractList = contractService.GetNbContractsNexleaseByUser(studentName, currentWeek.StartDateWeek, currentWeek.EndDateWeek);

    //     var briefNoteList = await briefNoteService.GetWeekNoteByUserId(currentWeek.StartDateWeek.ToDateTime(new TimeOnly()), currentWeek.EndDateWeek.ToDateTime(new TimeOnly()), userInfo.UserId);
    //     if (briefNoteList.Count != 0)
    //     {
    //         // meetingsBriefNote = briefNoteList.OrderBy(x => x.CreateDate).Where(x => x.TypeNote == 2).Select(x => x.TextNote).FirstOrDefault();
    //         commitmentList = briefNoteList.OrderBy(x => x.CreateDate).Where(x => x.TypeNote == 0).Select(x => x.TextNote).ToList();
    //         fileToCheckList = briefNoteList.OrderBy(x => x.CreateDate).Where(x => x.TypeNote == 1).Select(x => x.TextNote).ToList();
    //     }

    //     halfDayPlanningsList = await halfDayPlanningService.GetHalfDayPlanningsByWeekIdAsync(currentWeek.WeekId);

    //     var nbAppointments = await userService.GetNbAppointmentsAsync(userInfo.EmailAdress, periodFirstDay, periodLastDay);

    //     turnover = await userService.GetUserTurnover(userInfo.EmailAdress, periodFirstDay, periodLastDay);

    //     await SalesUpInitialization();

    //     meetingsList.Add(new CRMData { Label = "Rendez-vous à venir", Amount = nbAppointments });

    //     var nbOpenAccounts = userService.GetNbOpenAccountsByPeriod(userInfo.FirstName + " " + userInfo.LastName.ToUpper(), periodFirstDay, periodLastDay);
    //     openAccounts = new CRMData { Label = "", Amount = nbOpenAccounts };

    //     isInitialized = true;
    // }

    // public async Task SalesUpInitialization()
    // {
    //     httpClient.BaseAddress = new Uri(configuration["SalesUp:ApiUrl"]);
    //     salesUpService = new SalesUpService(httpClient);

    //     salesUpToken = await salesUpService.GetToken(configuration["SalesUp:AuthApiUrl"], configuration["SalesUp:ApiAccount:Email"], configuration["SalesUp:ApiAccount:Password"]);

    //     int currentUserSalesUpId = await salesUpService.GetUserIdByEmail(salesUpToken, userInfo.EmailAdress);

    //     bonus = await salesUpService.GetUserBonusById(salesUpToken, currentUserSalesUpId);
    // }

    // public void ConvertSignedContractInCrmDataList(List<SignedContract> signedContractList)
    // {
    //     contractsListForDonutChart.Add(new CRMData { Label = "Sauvegarde", Amount = signedContractList.Count(x => x.Sauvegarde == "OUI") });
    //     contractsListForDonutChart.Add(new CRMData { Label = "Maintenance", Amount = signedContractList.Count(x => x.Maintenance == "OUI") });
    //     contractsListForDonutChart.Add(new CRMData { Label = "Sécurité", Amount = signedContractList.Count(x => x.Sécurité == "OUI") });
    // }
}
