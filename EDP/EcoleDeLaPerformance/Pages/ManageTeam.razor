@using EcoleDeLaPerformance.Ui.Interfaces
@using EcoleDeLaPerformance.Ui.Models
@using EcoleDeLaPerformance.Ui.Services
@inject StateContainerService stateContainerService
@inject NavigationManager navigationManager
@inject IUserService userService
@inject IFavoritesAgencyService favoritesAgencyService
@page "/commercials"
@attribute [Authorize(Policy = "AdminOrSuperviseurOrDirecteurPolicy")]

<div class="px-6">
    @if (isInitialized)
    {
        <MudPaper Elevation="1" Class="p-4 mb-6">
            <MudTable T="UserWithFinance" OnRowClick="RowClickEvent" Items="@userWithFinanceList" Dense="true" Hover="true"
                      Filter="new Func<UserWithFinance, bool>(FilterFunc1)" HeaderClass="bg-primary bg-opacity-10" Elevation="0" RowClass="cursor-pointer">

                <ToolBarContent>
                    <MudTextField @bind-Value="searchString" Placeholder="Rechercher un utilisateur" Adornment="Adornment.Start"
                                  AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
                    <MudSpacer />
                </ToolBarContent>

                <HeaderContent>
                    <MudTh>
                        <MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<UserWithFinance, object>(x => x.User.Name)">
                            Prénom Nom
                        </MudTableSortLabel>
                    </MudTh>
                    <MudTh>
                        <MudSelect T="string" Label="Statut" @bind-SelectedValues="selectedGrades" Variant="Variant.Text" Dense MultiSelection="true" AdornmentColor="Color.Primary" Adornment="Adornment.End">
                            @foreach (var grade in gradesList)
                            {
                                <MudSelectItem Value="@grade">@grade</MudSelectItem>
                            }
                        </MudSelect>
                    </MudTh>
                    <MudTh>Directeur</MudTh>
                    <MudTh>
                        <MudSelect T="string" Label="Entité/Site" @bind-SelectedValues="selectedEntity" Variant="Variant.Text" Dense MultiSelection="true" AdornmentColor="Color.Primary" Adornment="Adornment.End">
                            @foreach (var entity in entitiesList)
                            {
                                <MudSelectItem Value="@entity">@entity</MudSelectItem>
                            }
                        </MudSelect>
                    </MudTh>
                    <MudTh>CA généré ce mois-ci</MudTh>
                    <MudTh>Variable mois actuel</MudTh>
                </HeaderContent>

                <RowTemplate>
                    <MudTd DataLabel="Prénom Nom">@context.User.Name</MudTd>
                    <MudTd DataLabel="Statut">@context.User.Grade?.Name</MudTd>
                    <MudTd DataLabel="Directeur">@context.User.Director?.Name</MudTd>
                    <MudTd DataLabel="Entité/Site">
                        @context.User.Entity
                    </MudTd>
                    <MudTd DataLabel="CA généré ce mois-ci">@context.Turnover.ToString("C")</MudTd>
                    <MudTd DataLabel="Variable mois actuel">@context.Bonus.ToString("C")</MudTd>
                </RowTemplate>

                <PagerContent>
                    <MudTablePager PageSizeOptions="new int[] { 10, 25, 50, 100, int.MaxValue }"
                                   RowsPerPageString="Lignes par page"
                                   InfoFormat="{first_item}-{last_item} sur {all_items}"
                                   AllItemsText="Tous" />
                </PagerContent>

            </MudTable>

        </MudPaper>
    }
</div>

@code {
    private bool isInitialized { get; set; }
    public User userInfo => stateContainerService.UserInfo;
    List<User?> filteredUserList = new List<User?>();
    User selectedUser = new User();
    private IEnumerable<string> selectedEntity { get; set; } = new HashSet<string>();
    private IEnumerable<string> selectedGrades { get; set; } = new HashSet<string>();
    List<string> entitiesList;
    List<string> gradesList;
    private string searchString = "";
    List<UserWithFinance> userWithFinanceList = new();
    DateOnly baseDate = DateOnly.FromDateTime(DateTime.Today);
    int daysSinceMonday;
    DateOnly monday;
    DateOnly friday;

    protected override async System.Threading.Tasks.Task OnInitializedAsync()
    {
        var users = await userService.GetUsersAsync();

        List<User> filteredUsers;
        if (userInfo.Role.Name == "Directeur" || userInfo.Role.Name == "Superviseur")
        {
            var favoritesAgencies = await favoritesAgencyService.GetFavoritesAgencyAsync(userInfo.Id);
            var agencyNames = favoritesAgencies.Select(a => a.AgencyName).Distinct().ToList();
            filteredUsers = users.Where(x => (x.DirectorId == userInfo.Id || agencyNames.Contains(x.Entity)) && x.DeletedAt == null).ToList();
        }
        else
        {
            filteredUsers = users.Where(x => x.Role.Name == "Commercial" && x.DeletedAt == null).ToList();
        }
        entitiesList = filteredUsers.Select(u => u.Entity).Where(e => !string.IsNullOrWhiteSpace(e)).Distinct().ToList();
        gradesList = filteredUsers.Select(u => u.Grade?.Name).Where(e => !string.IsNullOrWhiteSpace(e)).Distinct().ToList();

        DateOnly firstMonthDay = new DateOnly(DateTime.Today.Year, DateTime.Today.Month, 1);
        DateOnly lastMonthDay = new DateOnly(DateTime.Today.Year, DateTime.Today.Month, 1).AddMonths(1).AddDays(-1);

        var tasks = filteredUsers.Select(async user =>
        {
            var turnover = await userService.GetUserTurnoverAsync(user.Name, firstMonthDay, lastMonthDay);
            var bonus = await userService.GetUserBonusAsync(user.Name, firstMonthDay, lastMonthDay);

            return new UserWithFinance
            {
                User = user,
                Turnover = turnover,
                Bonus = bonus
            };
        });

        userWithFinanceList = (await System.Threading.Tasks.Task.WhenAll(tasks)).ToList();

        filteredUserList = filteredUsers;
        isInitialized = true;
    }

    private bool FilterFunc1(UserWithFinance element) => FilterFunc(element, searchString);

    private bool FilterFunc(UserWithFinance element, string searchString)
    {
        bool matchesSearch = string.IsNullOrWhiteSpace(searchString)
        || element.User.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase);

        bool matchesEntity = selectedEntity.Count() == 0
            || selectedEntity.Contains(element.User.Entity);

        bool matchesGrade = selectedGrades.Count() == 0
            || selectedGrades.Contains(element.User.Grade?.Name);

        return matchesSearch && matchesEntity && matchesGrade;
    }

    private async void RowClickEvent(TableRowClickEventArgs<UserWithFinance> tableRowClickEventArgs)
    {
        if (tableRowClickEventArgs != null)
        {
            selectedUser = tableRowClickEventArgs.Item.User;
            daysSinceMonday = ((int)baseDate.DayOfWeek + 6) % 7;
            monday = baseDate.AddDays(-daysSinceMonday);
            friday = monday.AddDays(4);
            var planningId = selectedUser.Plannings.Where(x => x.CreatedAt >= monday.ToDateTime(TimeOnly.MinValue) && x.CreatedAt <= friday.ToDateTime(TimeOnly.MinValue)).Select(x => x.Id).FirstOrDefault();
            navigationManager.NavigateTo($"/history/{selectedUser.Id}/{planningId}");
        }
    }

    public class UserWithFinance
    {
        public User User { get; set; }
        public decimal Turnover { get; set; }
        public decimal Bonus { get; set; }
    }

}
