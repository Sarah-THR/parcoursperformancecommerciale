@using EcoleDeLaPerformance.Ui.Interfaces
@using EcoleDeLaPerformance.Ui.Models
@using EcoleDeLaPerformance.Ui.Services
@inject StateContainerService stateContainerService
@inject NavigationManager navigationManager
@inject IUserService userService
@page "/commercials"
@attribute [Authorize(Policy = "AdminOrSuperviseurOrDirecteurPolicy")]

<div class="px-6">
    <MudPaper Elevation="1" Class="p-4 mb-6">
        <MudTable T="UserWithFinance" OnRowClick="RowClickEvent" Items="@userWithFinanceList" Dense="true" Hover="true"
                  Filter="new Func<UserWithFinance, bool>(FilterFunc1)" HeaderClass="bg-primary bg-opacity-10" Elevation="0" RowClass="cursor-pointer">

            <ToolBarContent>
                <MudTextField @bind-Value="searchString" Placeholder="Rechercher un utilisateur" Adornment="Adornment.Start"
                              AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
                <MudSpacer />
            </ToolBarContent>

            <HeaderContent>
                <MudTh>Prénom Nom</MudTh>
                <MudTh>Statut</MudTh>
                <MudTh>Superviseur</MudTh>
                <MudTh>Entité/Site</MudTh>
                <MudTh>CA généré ce mois-ci</MudTh>
                <MudTh>Variable mois actuel</MudTh>
            </HeaderContent>

            <RowTemplate>
                <MudTd DataLabel="Prénom Nom">@context.User.Name</MudTd>
                <MudTd DataLabel="Statut">@context.User.Grade?.Name</MudTd>
                <MudTd DataLabel="Superviseur">@context.User.Supervisor?.Name</MudTd>
                <MudTd DataLabel="Entité/Site">@context.User.Entity</MudTd>
                <MudTd DataLabel="CA généré ce mois-ci">@context.Turnover.ToString("C")</MudTd>
                <MudTd DataLabel="Variable mois actuel">@context.Bonus.ToString("C")</MudTd>
            </RowTemplate>

            <PagerContent>
                <MudTablePager PageSizeOptions="new int[] { 10, 25, 50, 100, int.MaxValue }"
                               RowsPerPageString="Lignes par page"
                               InfoFormat="{first_item}-{last_item} sur {all_items}"
                               AllItemsText="Tous" />
            </PagerContent>

        </MudTable>

    </MudPaper>
</div>

@code {
    public User userInfo => stateContainerService.UserInfo;
    List<User?> filteredUserList = new List<User?>();
    User selectedUser = new User();
    private string searchString = "";
    List<UserWithFinance> userWithFinanceList = new();
    DateOnly baseDate = DateOnly.FromDateTime(DateTime.Today);
    int daysSinceMonday;
    DateOnly monday;
    DateOnly friday;

    protected override async System.Threading.Tasks.Task OnInitializedAsync()
    {
        var users = await userService.GetUsersAsync();
        List<User> filteredUsers;
        if (userInfo.Role.Name == "Superviseur")
        {
            filteredUsers = users.Where(x => x.SupervisorId == userInfo.Id).ToList();
        }
        else
        {
            filteredUsers = users;
        }

        DateOnly firstMonthDay = new DateOnly(DateTime.Today.Year, DateTime.Today.Month, 1);
        DateOnly lastMonthDay = new DateOnly(DateTime.Today.Year, DateTime.Today.Month, 1).AddMonths(1).AddDays(-1);

        var tasks = filteredUsers.Select(async user =>
        {
            var turnover = await userService.GetUserTurnoverAsync(user.Name, firstMonthDay, lastMonthDay);
            var bonus = await userService.GetUserBonusAsync(user.Name, firstMonthDay, lastMonthDay);

            return new UserWithFinance
            {
                User = user,
                Turnover = turnover,
                Bonus = bonus
            };
        });

        userWithFinanceList = (await System.Threading.Tasks.Task.WhenAll(tasks)).ToList();

        filteredUserList = filteredUsers;
    }

    private bool FilterFunc1(UserWithFinance element) => FilterFunc(element, searchString);

    private bool FilterFunc(UserWithFinance element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.User.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }

    private async void RowClickEvent(TableRowClickEventArgs<UserWithFinance> tableRowClickEventArgs)
    {
        if (tableRowClickEventArgs != null)
        {
            selectedUser = tableRowClickEventArgs.Item.User;
            daysSinceMonday = ((int)baseDate.DayOfWeek + 6) % 7;
            monday = baseDate.AddDays(-daysSinceMonday);
            friday = monday.AddDays(4);
            var planningId = selectedUser.Plannings.Where(x => x.CreatedAt >= monday.ToDateTime(TimeOnly.MinValue) && x.CreatedAt <= friday.ToDateTime(TimeOnly.MinValue)).Select(x => x.Id).FirstOrDefault();
            navigationManager.NavigateTo($"/history/{selectedUser.Id}/{planningId}");
        }
    }

    public class UserWithFinance
    {
        public User User { get; set; }
        public decimal Turnover { get; set; }
        public decimal Bonus { get; set; }
    }

}
