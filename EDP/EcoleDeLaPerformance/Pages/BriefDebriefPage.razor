@page "/briefdebrief"
@using EcoleDeLaPerformance.Ui.Helper
@using EcoleDeLaPerformance.Ui.Models
@using EcoleDeLaPerformance.Ui.Services
@using EcoleDeLaPerformance.Ui.Shared.Components;
@using EcoleDeLaPerformance.Ui.Shared.Dialog
@using EcoleDeLaPerformance.Ui.Interfaces;
@using EcoleDeLaPerformance.Ui.Models;
@inject IDialogService dialog
@inject ISnackbar snackbar
@inject IBriefService briefNoteService
@inject IContractService contractService
@inject IUserService userService
@inject StateContainerService stateContainerService
@inject NavigationManager navigationManager

@*<NavigationLock OnBeforeInternalNavigation="OnBeforeInternalNavigation" />

<div class="d-flex justify-content-center mt-8">
  @if (isInitialized)
    {
        <MudTabs Rounded="true" PanelClass="pa-6" @bind-ActivePanelIndex="activeIndex">
            <ChildContent>
                <MudTabPanel>
                    <ChildContent>
                        <MudGrid>
                            <MudItem xs="12" Class="w-100">
                                <MudPaper Elevation="3">
                                    <MudItem Class="pa-5 w-100">
                                        <MudGrid>
                                            <MudItem>
                                                <MudImage Src="/images/Calendrier.png" Width="40" />
                                            </MudItem>
                                            <MudItem>
                                                <MudText Typo="Typo.h6" Color="Color.Primary" Class="text-uppercase">
                                                    Rendez-vous à venir
                                                    <MudTooltip Text="Il est nécessaire de saisir les informations dans la CRM pour qu'elles puissent être consultées dans la section debriefing." Arrow="true" Placement="Placement.Right">
                                                        <MudIconButton Icon="@Icons.Material.Filled.Info" />
                                                    </MudTooltip>
                                                </MudText>
                                            </MudItem>
                                        </MudGrid>
                                        <MudGrid Justify="Justify.FlexStart" Class="d-flex align-items-center">
                                            <MudItem Class="ps-5 pt-5 pl-5 pb-0 w-100 h-100" lg="3" xs="12">
                                                @if (meetingsBriefList.Count() != 0 && meetingsBriefList.First().Amount != 0)
                                                {
                                                    @* <DonutChart title="" crmDataList="meetingsBriefList" legend=false />
                                                    <MudText Typo="Typo.h6" class="fw-bold">Rendez-vous planifiés</MudText>
                                                    <MudText Typo="Typo.h6" class="fw-bold">meetingsBriefList.First().Amount</MudText>
                                                }
                                                else
                                                {
                                                    <MudText Typo="Typo.h6" class="fw-bold">Rendez-vous planifiés</MudText>
                                                    <MudText Typo="Typo.h6" class="fw-bold">0</MudText>
                                                }
                                            </MudItem>
                                            <MudItem lg="9" xs="12" Class="w-100">
                                        <MudGrid Justify="Justify.FlexStart">
                                        <MudItem xs="12" lg="4" Class="pb-0 w-100">
                                        <MudText Color="Color.Primary"><strong>Ajouter une note</strong></MudText>
                                        </MudItem>
                                        <MudItem xs="12" lg="12" Class="w-100">
                                        <MudTextField AdornmentColor="Color.Primary" @bind-Value="noteMeeting.TextNote" T="string" Variant="Variant.Outlined" Lines="6" />
                                        </MudItem>
                                        </MudGrid>
                                        </MudItem>
                                        </MudGrid>
                                    </MudItem>
                                </MudPaper>
                            </MudItem>
                            <MudItem xs="12" Class="pt-16 w-100">
                                <BriefNoteComponent deleteFunction="DeleteBriefNote" title="Engagement de signature de la semaine" logoPath="/images/Signature.png" info="Il s’agit des dossiers que pense signer le commercial dans la semaine qui arrive." type="0" noteList="@noteCommitmentList" onChange="ChangeOn" />
                            </MudItem>
                            <MudItem xs="12" Class="pt-16 w-100">
                                <BriefNoteComponent deleteFunction="DeleteBriefNote" title="Dossiers à checker" logoPath="/images/Dossier.png" info="Cette section doit être remplie avec votre superviseur." type="1" noteList="@noteFolderList" onChange="ChangeOn" />
                            </MudItem>
                        </MudGrid>
                    </ChildContent>
                    <TabWrapperContent>
                        <MudTooltip Text="Briefing de la semaine">
                            @context
                        </MudTooltip>
                    </TabWrapperContent>
                    <TabContent>
                        <MudText Typo="Typo.h6" Class="text-uppercase">Briefing de la semaine</MudText>
                    </TabContent>
                </MudTabPanel>

                <MudTabPanel>
                    <ChildContent>
                        <MudGrid>
                            <MudItem xs="12" Class="w-100">
                                <BriefNoteComponent deleteFunction="DeleteBriefNote" title="Affaires levées" logoPath="/images/Signature.png" info="Il s'agit des affaires (chiffrage) que vous avez levé durant la semaine (prospection physique, téléphonique, appels entrants, RDV, etc)." type="3" noteList="@noteCaseClosedList" onChange="ChangeOn" />
                            </MudItem>
                            <MudItem xs="12" Class="pt-16 w-100">
                                <BriefNoteComponent deleteFunction="DeleteBriefNote" title="Affaires en cours" logoPath="/images/Signature.png" info="Il s'agit des affaires qui ne sont toujours pas signées ou en attente de réponse. Il est possible que certaines affaires nécessitent une action commerciale complémentaire de votre part." type="4" noteList="@noteOngoingCaseList" onChange="ChangeOn" />
                            </MudItem>
                            <MudItem xs="12" Class="pt-16 w-100">
                                <MudPaper Elevation="3">
                                    <MudItem Class="pa-5 w-100">
                                        <MudGrid>
                                            <MudItem>
                                                <MudImage Src="/images/Dossier.png" Width="40" />
                                            </MudItem>
                                            <MudItem>
                                                <MudText Typo="Typo.h6" Color="Color.Primary" Class="text-uppercase">
                                                    Dossiers et contrats signés
                                                </MudText>
                                            </MudItem>
                                        </MudGrid>
                                        <MudGrid>
                                            <MudItem lg="4" xs="12" Class="w-100">
                                                <Speedometer crmData="new CRMData{Amount = nexleaseContractList}" maxValue="6" title="Location :" />
                                            </MudItem>
                                            <MudItem lg="4" xs="12" Class="w-100">
                                                <Speedometer crmData="new CRMData{Amount = saleContractList}" maxValue="6" title="Achat :" />
                                            </MudItem>
                                            <MudItem lg="4" xs="12" Class="w-100">
                                                <Speedometer crmData="new CRMData{Amount = signedContractList}" maxValue="6" title="Contrats :" />
                                            </MudItem>
                                        </MudGrid>
                                    </MudItem>
                                </MudPaper>
                            </MudItem>
                            <MudItem xs="12" Class="pt-16 w-100">
                                <MudPaper Elevation="3">
                                    <MudItem Class="pa-5 w-100">
                                        <MudGrid>
                                            <MudItem>
                                                <MudImage Src="/images/Calendrier.png" Width="40" />
                                            </MudItem>
                                            <MudItem>
                                                <MudText Typo="Typo.h6" Color="Color.Primary" Class="text-uppercase">
                                                    Nombre de RDV PRA (pris - réalisés - à venir)
                                                    <MudTooltip Text="Il est nécessaire de saisir les informations dans la CRM afin qu'elles puissent être visualisées dans le debrief après." Arrow="true" Placement="Placement.Right">
                                                        <MudIconButton Icon="@Icons.Material.Filled.Info" />
                                                    </MudTooltip>
                                                </MudText>
                                            </MudItem>
                                            <MudItem Class="ps-5 pt-5 pl-5 pb-0 w-100 d-flex justify-center" xs="12">
                                                @if (meetingsDeBriefList.Count() != 0 && meetingsDeBriefList.First().Amount != 0)
                                                {
                                                    <DonutChart title="" crmDataList="meetingsDeBriefList" legend=true />
                                                }
                                                else
                                                {
                                                    <h4 class="fw-bold">0</h4>
                                                }
                                            </MudItem>
                                        </MudGrid>
                                    </MudItem>
                                </MudPaper>
                            </MudItem>
                        </MudGrid>
                    </ChildContent>
                    <TabWrapperContent>
                        <MudTooltip Text="DeBriefing de la semaine">
                            @context
                        </MudTooltip>
                    </TabWrapperContent>
                    <TabContent>
                        <MudText Typo="Typo.h6" Class="text-uppercase">DeBriefing de la semaine</MudText>
                    </TabContent>
                </MudTabPanel>
            </ChildContent>
            <Header>
                @if (activeIndex == 1)
                {
                    <MudButton Class="mx-2" OnClick='()=>ConfirmBrief("Debrief")' Style=" text-transform: none;height:50px" Variant="Variant.Filled" Color="Color.Secondary">Enregistrer les modifications</MudButton>
                }
                else if (activeIndex == 0)
                {
                    @if (currentWeek.Draft == false)
                    {
                        <MudButton Class="mx-2" OnClick='()=>ConfirmBrief("Brief", false)' Style=" text-transform: none; width:162px; height:50px" Variant="Variant.Filled" Color="Color.Secondary">Enregistrer en brouillon</MudButton>
                    }
                    <MudButton Class="mx-2" OnClick='()=>ConfirmBrief("Brief", true)' Style=" text-transform: none; height:50px" Variant="Variant.Filled" Color="Color.Secondary">Envoyer mon brief</MudButton>
                }
            </Header>
        </MudTabs>

    }
    else
    {
        <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
    }
</div> *@


@code {
    // int activeIndex = 0;
    // List<BriefNote> noteCommitmentList = new List<BriefNote>();
    // List<BriefNote> noteFolderList = new List<BriefNote>();
    // List<BriefNote> noteCaseClosedList = new List<BriefNote>();
    // List<BriefNote> noteOngoingCaseList = new List<BriefNote>();
    // List<BriefNote> briefNoteList = new List<BriefNote>();
    // BriefNote noteMeeting = new BriefNote();
    // List<CRMData> meetingsBriefList = new List<CRMData>();
    // List<CRMData> meetingsDeBriefList = new List<CRMData>();
    // CRMData openAccountsList = new CRMData();
    // int signedContractList = 0;
    // int saleContractList = 0;
    // int nexleaseContractList = 0;
    // public User userInfo => stateContainerService.UserInfo;
    // Week? currentWeek = new Week();
    // MailHelper mailHelper = new MailHelper();
    // private bool isInitialized { get; set; }
    // private DateOnly currentDate = DateOnly.FromDateTime(DateTime.UtcNow);
    // bool onChange;

    // protected override async Task OnInitializedAsync()
    // {
    //     // currentWeek = userInfo.Weeks?.FirstOrDefault(week => week.StartDateWeek <= currentDate && currentDate < week.EndDateWeek);

        // if (!userInfo.Role.Contains("Commercial"))
        // {
        //     navigationManager.NavigateTo("/");
        // }
        // else
        // {
        //     int period = currentWeek.PeriodNumber;
        //     DateOnly periodLastDay = userInfo.Weeks.Where(x => x.PeriodNumber == period).Last().EndDateWeek;
        //     DateOnly periodFirstDay = userInfo.Weeks.Where(x => x.PeriodNumber == period).First().StartDateWeek;

        //     var nbOpenAccounts = userService.GetNbOpenAccountsByPeriod(userInfo.FirstName + " " + userInfo.LastName.ToUpper(), periodFirstDay, periodLastDay);
        //     openAccountsList = new CRMData { Label = "", Amount = nbOpenAccounts };

        //     var currentDate = DateOnly.FromDateTime(DateTime.UtcNow);
        //     currentWeek = userInfo.Weeks.FirstOrDefault(week => week.StartDateWeek <= currentDate && currentDate < week.EndDateWeek);

        //     #region appointments
        //     int nbAppointmentsUpcoming = await userService.GetNbAppointmentsAsync(userInfo.EmailAdress, currentDate, periodLastDay);
        //     int nbAppointmentsMade = await userService.GetNbAppointmentsAsync(userInfo.EmailAdress, periodFirstDay, currentDate);
        //     meetingsDeBriefList.Add(new CRMData { Label = "Rendez-vous à venir", Amount = nbAppointmentsUpcoming });
        //     meetingsDeBriefList.Add(new CRMData { Label = "Rendez-vous réalisé", Amount = nbAppointmentsMade });

        //     var nbAppointments = await userService.GetNbAppointmentsAsync(userInfo.EmailAdress, periodFirstDay, periodLastDay);
        //     meetingsBriefList.Add(new CRMData { Label = "Rendez-vous", Amount = nbAppointments });
        //     #endregion

        //     var studentName = (userInfo.FirstName + " " + userInfo.LastName);
        //     signedContractList = contractService.GetNbContractsByUser(studentName, currentWeek.StartDateWeek, currentWeek.EndDateWeek);
        //     saleContractList = contractService.GetNbContractsSaleByUser(studentName, currentWeek.StartDateWeek, currentWeek.EndDateWeek);
        //     nexleaseContractList = contractService.GetNbContractsNexleaseByUser(studentName, currentWeek.StartDateWeek, currentWeek.EndDateWeek);

        //     briefNoteList = await briefNoteService.GetWeekNoteByUserId(
        //         currentWeek.StartDateWeek.ToDateTime(TimeOnly.Parse("00:00:00.000")),
        //         currentWeek.EndDateWeek.ToDateTime(TimeOnly.Parse("00:00:00.000")),
        //         userInfo.UserId);

        //     SortingBriefnotes();

        //     CheckEmptyList();
        //     isInitialized = true;
        // }
    // }

    // public async void DeleteBriefNote(int briefNoteId)
    // {
    //     try
    //     {
    //         await briefNoteService.DeleteBriefNoteAsync(briefNoteId);
    //     }
    //     catch (Exception ex)
    //     {
    //         SentrySdk.CaptureException(ex);
    //         snackbar.Add("Une erreur est survenue. Contactez l'administrateur", Severity.Error);
    //     }
    // }
    // public void SortingBriefnotes()
    // {
    //     noteCommitmentList = briefNoteList.Where(x => x.TypeNote == 0).OrderBy(x => x.CreateDate).ToList();
    //     noteFolderList = briefNoteList.Where(x => x.TypeNote == 1).OrderBy(x => x.CreateDate).ToList();
    //     noteMeeting = briefNoteList.Where(x => x.TypeNote == 2).FirstOrDefault();
    //     noteCaseClosedList = briefNoteList.Where(x => x.TypeNote == 3).OrderBy(x => x.CreateDate).ToList();
    //     noteOngoingCaseList = briefNoteList.Where(x => x.TypeNote == 4).OrderBy(x => x.CreateDate).ToList();
    // }
    // public void CheckEmptyList()
    // {
    //     if (noteCommitmentList.Count == 0)
    //     {
    //         BriefNote tempBriefNote = new BriefNote();
    //         tempBriefNote.TypeNote = 0;
    //         tempBriefNote.UserId = userInfo.UserId;
    //         noteCommitmentList.Add(tempBriefNote);
    //     }
    //     if (noteFolderList.Count == 0)
    //     {
    //         BriefNote tempBriefNote = new BriefNote();
    //         tempBriefNote.TypeNote = 1;
    //         tempBriefNote.UserId = userInfo.UserId;
    //         noteFolderList.Add(tempBriefNote);
    //     }
    //     if (noteMeeting == null)
    //     {
    //         noteMeeting = new BriefNote();
    //         noteMeeting.TypeNote = 2;
    //         noteMeeting.UserId = userInfo.UserId;
    //     }
    //     if (noteCaseClosedList.Count == 0)
    //     {
    //         BriefNote tempBriefNote = new BriefNote();
    //         tempBriefNote.TypeNote = 3;
    //         tempBriefNote.UserId = userInfo.UserId;
    //         noteCaseClosedList.Add(tempBriefNote);
    //     }
    //     if (noteOngoingCaseList.Count == 0)
    //     {
    //         BriefNote tempBriefNote = new BriefNote();
    //         tempBriefNote.TypeNote = 4;
    //         tempBriefNote.UserId = userInfo.UserId;
    //         noteOngoingCaseList.Add(tempBriefNote);
    //     }
    // }

    // private async Task ConfirmBrief(string value, bool Draft = false)
    // {
    //     var parameters = new DialogParameters<ConfirmDialog>();
    //     string title;
    //     if (value == "Brief")
    //     {
    //         if (Draft)
    //         {
    //             if (currentWeek.Draft == false)
    //                 parameters.Add("MainMessage", $"Voulez vous vraiment envoyé ce {value} ? Votre superviseur sera prévenu .");
    //             else
    //                 parameters.Add("MainMessage", $"Voulez vous vraiment envoyé ce {value} ? (Votre superviseur a déjà été prévenu.)");
    //             title = "Envoyer mon briefing";
    //         }
    //         else
    //         {
    //             parameters.Add("MainMessage", $"Voulez vous vraiment enregistrer ce {value} en brouillon ? Votre superviseur ne sera pas prévenu.");
    //             title = "Enregistrer le briefing en brouillon";

    //         }
    //     }
    //     else
    //     {
    //         parameters.Add("MainMessage", $"Voulez vous vraiment enregistrer ce {value} ?");
    //         title = "Envoyer mon debrief";
    //     }

    //     parameters.Add("ButtonConfirm", "Envoyer");
    //     parameters.Add("ButtonCancel", "Annuler");
    //     var options = new DialogOptions() { MaxWidth = MaxWidth.ExtraSmall, CloseButton = true, ClassBackground = "DialogBackgroundBlurEffect" };
    //     var dialogrespons = await (await dialog.ShowAsync<ConfirmDialog>(title, parameters, options)).Result;
    //     if (!dialogrespons.Canceled)
    //     {
    //         try
    //         {
    //             List<BriefNote>[] concernedList = new List<BriefNote>[2];
    //             if (value == "Brief")
    //                 concernedList = new List<BriefNote>[] { noteCommitmentList, noteFolderList };
    //             else
    //                 concernedList = new List<BriefNote>[] { noteCaseClosedList, noteOngoingCaseList };

    //             foreach (var noteList in concernedList)
    //             {
    //                 foreach (var note in noteList)
    //                 {
    //                     if (!String.IsNullOrEmpty(note.TextNote) && note.BriefNoteId.Equals(Guid.Empty))
    //                     {
    //                         await briefNoteService.InsertBriefNoteAsync(note);
    //                     }
    //                     else if (!String.IsNullOrEmpty(note.TextNote) && !note.BriefNoteId.Equals(Guid.Empty))
    //                     {
    //                         await briefNoteService.UpdateBriefNoteAsync(note);
    //                     }
    //                 }
    //             }

    //             if (value == "Brief")
    //             {
    //                 if (!String.IsNullOrEmpty(noteMeeting.TextNote) && noteMeeting.BriefNoteId.Equals(Guid.Empty))
    //                     await briefNoteService.InsertBriefNoteAsync(noteMeeting);
    //                 else if (!String.IsNullOrEmpty(noteMeeting.TextNote) && !noteMeeting.BriefNoteId.Equals(Guid.Empty))
    //                     await briefNoteService.UpdateBriefNoteAsync(noteMeeting);
    //             }

    //             if (Draft && !currentWeek.Draft)
    //             {
    //                 currentWeek.Draft = true;
    //                 await weekService.UpdateWeekAsync(currentWeek);
    //                 mailHelper.EnvoiMail(userInfo.SupervisorNavigation.EmailAdress, $"{userInfo.FirstName} " + userInfo.LastName, currentWeek.StartDateWeek, currentWeek.EndDateWeek);
    //                 StateHasChanged();
    //             }
    //             else if (!Draft && !currentWeek.Draft)
    //             {
    //                 currentWeek.Draft = false;
    //                 await weekService.UpdateWeekAsync(currentWeek);
    //                 StateHasChanged();
    //             }

    //             snackbar.Add($"Le {value} a été enregistré avec succès.", Severity.Success);
    //             await Task.Delay(2000); // Délai de 2 secondes
    //             navigationManager.NavigateTo(navigationManager.Uri, forceLoad: true); // Recharge la page
    //         }
    //         catch (Exception ex)
    //         {
    //             SentrySdk.CaptureException(ex);
    //             snackbar.Add("Une erreur est survenue. Contactez l'administrateur", Severity.Error);
    //         }


    //     }
    // }

    // async void ChangeOn(bool value)
    // {
    //     onChange = value;
    // }

    // private bool _isNavigating;
    // private async Task OnBeforeInternalNavigation(LocationChangingContext context)
    // {
    //     if (onChange == true)
    //     {
    //         if (_isNavigating) return; // Évitez les boucles infinies

    //         _isNavigating = true;

    //         var parameters = new DialogParameters
    //         {
    //             { "mainMessage", "Les modifications que vous avez apportées seront perdues. Êtes-vous sûr de vouloir quitter la page ?" },
    //             { "buttonConfirm", "Oui" },
    //             { "buttonCancel", "Non" }
    //         };

    //         var options = new DialogOptions
    //             {
    //                 MaxWidth = MaxWidth.Medium,
    //                 CloseButton = true,
    //                 ClassBackground = "DialogBackgroundBlurEffect",
    //                 FullWidth = true
    //             };

    //         var dialogResult = await dialog.Show<ConfirmDialog>("", parameters, options).Result;

    //         if (!dialogResult.Canceled)
    //         {
    //             // Autoriser la navigation
    //             navigationManager.NavigateTo(context.TargetLocation, forceLoad: true);
    //         }
    //         else
    //         {
    //             // Bloquer la navigation
    //             context.PreventNavigation();
    //         }
    //         _isNavigating = false;
    //         onChange = false;
    //     }

    // }
}
