@using EcoleDeLaPerformance.Ui.Interfaces
@using EcoleDeLaPerformance.Ui.Models
@using EcoleDeLaPerformance.Ui.Services
@using EcoleDeLaPerformance.Ui.Shared.Dialog
@using EcoleDeLaPerformance.Ui.Shared.Components
@inject StateContainerService stateContainerService
@inject IUserService userService
@inject IDialogService dialog
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager
@page "/users"

<div class="px-6">
    <MudPaper Elevation="1" Class="p-4 mb-6">
        <MudStack Row AlignItems="AlignItems.Center" Spacing="1" Class="mb-4">
            <MudIcon Icon="@Icons.Material.Filled.People" Color="Color.Info" />
            <MudText Typo="Typo.h6">Gestion des utilisateurs</MudText>
        </MudStack>
        <MudTable T="User" OnRowClick="RowClickEvent" Items="@filteredUserList" Dense="true" Hover="true" Filter="new Func<User, bool>(FilterFunc1)" HeaderClass="bg-primary bg-opacity-10" Elevation="0" RowClass="cursor-pointer">
            <ToolBarContent>
                <MudTextField @bind-Value="searchString" Placeholder="Rechercher un utilisateur" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
                <MudSpacer />
                <MudButton Variant="Variant.Filled" Color="Color.Secondary" OnClick="() => CreateUser()">Créer un utilisateur</MudButton>
            </ToolBarContent>
            <HeaderContent>
                <MudTh>Prénom Nom</MudTh>
                <MudTh>Role</MudTh>
                <MudTh>Statut</MudTh>
                <MudTh>Entité/Site</MudTh>
                <MudTh>Superviseur</MudTh>
                <MudTh>Date début de suivi</MudTh>
                <MudTh></MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Prénom Nom">@context.Name</MudTd>
                <MudTd DataLabel="Role"></MudTd>
                <MudTd DataLabel="Statut">@context.Grade?.Name</MudTd>
                <MudTd DataLabel="Entité/Site">@context.Entity</MudTd>
                <MudTd DataLabel="Superviseur">@context.Supervisor?.Name</MudTd>
                <MudTd DataLabel="Date début de suivi">@context.StartFollowUp</MudTd>
                <MudTd DataLabel=""><MudIconButton Icon="@Icons.Material.Filled.Delete" aria-label="delete" Color="Color.Secondary" OnClick="() => DeleteUser(context)"/></MudTd>
            </RowTemplate>
            <PagerContent>
                <MudTablePager PageSizeOptions="new int[] { 10, 25, 50, 100, int.MaxValue }"
                               RowsPerPageString="Lignes par page"
                               InfoFormat="{first_item}-{last_item} sur {all_items}"
                               AllItemsText="Tous" />
            </PagerContent>
        </MudTable>
        <MudStack Row AlignItems="AlignItems.Center" Spacing="1" Class="mb-4">
            <MudIcon Icon="@Icons.Material.Filled.People" Color="Color.Warning" />
            <MudText Typo="Typo.h6">Gestion des utilisateurs archivés</MudText>
        </MudStack>
        <MudTable Items="@deletedUserList" Dense="true" Hover="false" Filter="new Func<User, bool>(FilterFunc1)" HeaderClass="bg-primary bg-opacity-10" Elevation="0">
            <HeaderContent>
                <MudTh>Prénom Nom</MudTh>
                <MudTh>Role</MudTh>
                <MudTh>Statut</MudTh>
                <MudTh>Entité/Site</MudTh>
                <MudTh>Superviseur</MudTh>
                <MudTh>Date début de suivi</MudTh>
                <MudTh></MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Prénom Nom">@context.Name</MudTd>
                <MudTd DataLabel="Role"></MudTd>
                <MudTd DataLabel="Statut">@context.Grade?.Name</MudTd>
                <MudTd DataLabel="Entité/Site">@context.Entity</MudTd>
                <MudTd DataLabel="Superviseur">@context.Supervisor?.Name</MudTd>
                <MudTd DataLabel="Date début de suivi">@context.StartFollowUp</MudTd>
                <MudTd DataLabel=""><MudIconButton Icon="@Icons.Material.Filled.Cached" aria-label="recycle" Color="Color.Success" OnClick="() => RecycleUser(context)" /></MudTd>
            </RowTemplate>
            <PagerContent>
                <MudTablePager PageSizeOptions="new int[] { 10, 25, 50, 100, int.MaxValue }"
                               RowsPerPageString="Lignes par page"
                               InfoFormat="{first_item}-{last_item} sur {all_items}"
                               AllItemsText="Tous" />
            </PagerContent>
        </MudTable>
    </MudPaper>
</div>

@code {
    public User userInfo => stateContainerService.UserInfo;
    List<User?> usersList = new List<User?>();
    List<User?> filteredUserList = new List<User?>();
    List<User?> deletedUserList = new List<User?>();
    User selectedUser = new User();
    private string searchString = "";

    protected override async System.Threading.Tasks.Task OnInitializedAsync()
    {
        var users = await userService.GetUsersAsync();
        usersList = users.Where(x => x.DeletedAt == null).ToList();
        filteredUserList = usersList;
        deletedUserList = users.Where(x => x.DeletedAt != null).ToList();
    }

    private async void HandleUserDeleted(bool wasDeleted)
    {
        if (wasDeleted)
        {
            var users = await userService.GetUsersAsync();
            usersList = users.Where(x => x.DeletedAt == null).ToList();
            filteredUserList = usersList;
            deletedUserList = users.Where(x => x.DeletedAt != null).ToList();
        }
        else
        {
            var users = await userService.GetUsersAsync();
            usersList = users.Where(x => x.DeletedAt == null).ToList();
            filteredUserList = usersList;
            deletedUserList = users.Where(x => x.DeletedAt != null).ToList();
        }

        StateHasChanged();
    }

    private bool FilterFunc1(User element) => FilterFunc(element, searchString);

    private bool FilterFunc(User element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }

    private async System.Threading.Tasks.Task CreateUser()
    {
        var parameters = new DialogParameters<AddUserDialog>();

        parameters.Add("userInfo", userInfo);
        var options = new DialogOptions() { MaxWidth = MaxWidth.Medium, CloseButton = true, BackgroundClass = "DialogBackgroundBlurEffect", FullWidth = true };
        var dialogresponse = await (await dialog.ShowAsync<AddUserDialog>("Ajouter un utilisateur", parameters, options)).Result;
        if (!dialogresponse.Canceled)
        {
            await OnInitializedAsync();
            StateHasChanged();
        }
    }

    private async void RowClickEvent(TableRowClickEventArgs<User> tableRowClickEventArgs)
    {
        if (tableRowClickEventArgs != null)
        {
            selectedUser = tableRowClickEventArgs.Item;
            var parameters = new DialogParameters<UpdateUserDialog>();

            parameters.Add("userInfo", userInfo);
            parameters.Add("studentInfo", selectedUser);
            var options = new DialogOptions() { MaxWidth = MaxWidth.Medium, CloseButton = true, BackgroundClass = "DialogBackgroundBlurEffect", FullWidth = true };
            var dialogresponse = await (await dialog.ShowAsync<UpdateUserDialog>("Modifier un utilisateur", parameters, options)).Result;
            if (!dialogresponse.Canceled)
            {
                await OnInitializedAsync();
                StateHasChanged();
            }
        }
    }

    private async void DeleteUser(User user)
    {
        await userService.DeleteUserAsync(user.Id);
        usersList.Remove(user);
        deletedUserList.Add(user);
        StateHasChanged();
    }


    private async void RecycleUser(User user)
    {
        user.DeletedAt = null;
        await userService.UpdateUserAsync(user);
        usersList.Add(user);
        deletedUserList.Remove(user);
        StateHasChanged();
    }
}
