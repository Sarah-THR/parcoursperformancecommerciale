@using EcoleDeLaPerformance.Ui.Interfaces
@using EcoleDeLaPerformance.Ui.Models
@using EcoleDeLaPerformance.Ui.Models.BI
@using EcoleDeLaPerformance.Ui.Services
@using EcoleDeLaPerformance.Ui.Shared
@using EcoleDeLaPerformance.Ui.Shared.Components
@inject StateContainerService stateContainerService
@inject IUserService userService
@inject IBriefService briefService
@inject IContractService contractService
@page "/"

<PageTitle>Tableau de bord</PageTitle>

<div class="px-6">
    <MudPaper Elevation="1" Class="p-4 mb-6">
        <MudStack Row AlignItems="AlignItems.Center" Spacing="1" Class="mb-4">
            <MudIcon Icon="@Icons.Material.Filled.CrisisAlert" Color="Color.Info" />
            <MudText Typo="Typo.h6">Objectifs</MudText>
        </MudStack>
        <MudGrid>
            <MudItem xs="12" md="4">
                <MudText Typo="Typo.subtitle1" Class="text-slate-600">Objectif mensuel</MudText>
                <MudText Typo="Typo.h5" Class="text-slate-800 font-bold">@monthGoal.ToString("F") €</MudText>
                <MudProgressLinear Value="@monthlyTurnoverProgress" Color="Color.Primary" />
            </MudItem>
            <MudItem xs="12" md="4">
                <MudText Typo="Typo.subtitle1" Class="text-slate-600">Objectif trimestriel</MudText>
                <MudText Typo="Typo.h5" Class="text-slate-800 font-bold">@trimestrialMonthGoal.ToString("F") €</MudText>
                <MudProgressLinear Value="@trimestrialMonthlyTurnoverProgress" Color="Color.Secondary" />
            </MudItem>
            <MudItem xs="12" md="4">
                <MudGrid>
                    <MudItem xs="6">
                        <MudPaper Class="p-4 rounded-lg" Style="background: linear-gradient(to right, #fef2f2, #fee2e2);" MaxHeight="108px">
                            <MudText Typo="Typo.subtitle1" Class="text-red-600 font-medium">CA généré</MudText>
                            <MudText Typo="Typo.h6" Class="text-red-700 font-bold">@turnover.ToString("F") €</MudText>
                        </MudPaper>
                    </MudItem>
                    <MudItem xs="6">
                        <MudPaper Class="p-4 rounded-lg" Style="background: linear-gradient(to right, #ecfdf5, #d1fae5);" MaxHeight="108px">
                            <MudText Typo="Typo.subtitle1" Class="text-green-600 font-medium">Variable</MudText>
                            <MudText Typo="Typo.h6" Class="text-green-700 font-bold">@bonus.ToString("F") €</MudText>
                        </MudPaper>
                    </MudItem>
                </MudGrid>
            </MudItem>
        </MudGrid>
    </MudPaper>

    <MudPaper Elevation="1" Class="p-4 mb-6">
        <MudStack Row AlignItems="AlignItems.Center" Spacing="1" Class="mb-4">
            <MudIcon Icon="@Icons.Material.Filled.TrendingUp" Color="Color.Error" />
            <MudText Typo="Typo.h6">Chiffres du mois en cours</MudText>
        </MudStack>
        <MudGrid>
            <MudItem xs="12" md="4">
                <DonutCard Title="Contrats" Icon="@Icons.Material.Filled.Description" IconColor="Color.Error" Data="@contractData" Labels="@contractLabels" />
            </MudItem>
            <MudItem xs="12" md="4">
                <MetricCard Title="Rendez-vous à venir" Value="@nbAppointments.ToString()" Progress="100" Color="Color.Info" Icon="@Icons.Material.Filled.CalendarToday" Subtitle="RENDEZ-VOUS" />
            </MudItem>
            <MudItem xs="12" md="4">
                <MetricCard Title="Heures de formation" Value="0h" Progress="0" Color="Color.Success" Icon="@Icons.Material.Filled.AccessTime" Subtitle="OMNYSIS" />
            </MudItem>
        </MudGrid>
    </MudPaper>

    <MudGrid>
        <MudItem xs="12" lg="6">
            <MudPaper Elevation="1" Class="p-4">
                <MudStack Row AlignItems="AlignItems.Center" Spacing="1" Class="mb-4">
                    <MudIcon Icon="@Icons.Material.Filled.TrackChanges" Color="Color.Warning" />
                    <MudText Typo="Typo.h6">Engagement de signature de la semaine</MudText>
                </MudStack>
                <MudList Dense="true" T="string" Disabled>
                    @foreach (var brief in briefs)
                    {
                        <EngagementItem Text="@brief?.SignatureCommitment" />
                    }
                </MudList>
            </MudPaper>
        </MudItem>

        <MudItem xs="12" lg="6">
            <MudPaper Elevation="1" Class="p-4">
                <MudStack Row AlignItems="AlignItems.Center" Spacing="1" Class="mb-4">
                    <MudIcon Icon="@Icons.Material.Filled.AssignmentTurnedIn" Color="Color.Secondary" />
                    <MudText Typo="Typo.h6">Dossiers à checker</MudText>
                </MudStack>
                <MudList Dense="true" T="string" Disabled>
                    @foreach (var brief in briefs)
                    {
                        <FileItem Text="@brief?.FilesToCheck" />
                    }
                </MudList>
            </MudPaper>
        </MudItem>
    </MudGrid>
</div>

@code {
    public User userInfo => stateContainerService.UserInfo;
    double[] contractData;
    string[] contractLabels = new[] { "Sauvegarde", "Maintenance", "Sécurité" };
    decimal trimestrialTurnover = 0;
    decimal trimestrialMonthGoal = 0;
    int trimestrialMonthlyTurnoverProgress => trimestrialMonthGoal == 0 ? 0 : (int)Math.Round((trimestrialTurnover / trimestrialMonthGoal) * 100);
    decimal turnover = 0; 
    decimal monthGoal = 0;
    int monthlyTurnoverProgress => monthGoal == 0 ? 0 : (int)Math.Round((turnover / monthGoal) * 100);
    decimal bonus = 0;
    decimal nbAppointments = 0;
    DateOnly today = new DateOnly(DateTime.Today.Year, DateTime.Today.Month, DateTime.Today.Day);
    DateOnly firstMonthDay = new DateOnly(DateTime.Today.Year, DateTime.Today.Month, 1);
    DateOnly lastMonthDay = new DateOnly(DateTime.Today.Year, DateTime.Today.Month, 1).AddMonths(1).AddDays(-1);
    List<Brief?> briefs = new();
    List<EcolePerformanceSm?> contracts = new();

    protected override async System.Threading.Tasks.Task OnInitializedAsync()
    {
        turnover = await userService.GetUserTurnoverAsync(userInfo.Name, firstMonthDay, lastMonthDay);
        bonus = await userService.GetUserBonusAsync(userInfo.Name, firstMonthDay, lastMonthDay);
        nbAppointments = await userService.GetNbAppointmentsAsync(userInfo.Email, firstMonthDay, lastMonthDay);
        briefs = await briefService.GetBriefByUserId(firstMonthDay.ToDateTime(TimeOnly.MinValue), lastMonthDay.ToDateTime(TimeOnly.MinValue), userInfo.Id);
        contracts = contractService.GetContractsByPeriod(userInfo.Name, firstMonthDay, lastMonthDay);
        contractData = new[]
            {
                (double)contracts.Count(c => c.Sauvegarde == "OUI"),
                (double)contracts.Count(c => c.Maintenance == "OUI"),
                (double)contracts.Count(c => c.Sécurité == "OUI")
            };
    }
}