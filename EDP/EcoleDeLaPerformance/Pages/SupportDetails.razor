@page "/support/{categoryId}"
@using EcoleDeLaPerformance.Ui.Interfaces
@using EcoleDeLaPerformance.Ui.Models
@inject NavigationManager navigationManager
@inject IDocumentService documentService
@inject ICategoryService categoryService
@inject IJSRuntime js

<PageTitle>Support</PageTitle>

<div class="px-6">
    <MudPaper Class="p-4 mb-6 align-content-center">
        <MudButton OnClick='() => navigationManager.NavigateTo("/support")'
                   Target="_blank"
                   Variant="Variant.Text"
                   StartIcon="@Icons.Material.Filled.ArrowBack"
                   Color="Color.Primary"
                   Style="text-transform:none" 
                   Class="mb-6">
            Retour
        </MudButton>
        @if (isInitialized && selectedDocument != null)
        {
           <MudText Typo="Typo.h6" Class="mb-4">@category.Title</MudText>
           <MudStack Row="true" Class="my-4" Spacing="2">
                <MudIconButton Icon="@Icons.Material.Filled.ArrowBackIos"
                               Disabled="@IsPreviousDisabled"
                               OnClick="PreviousPage"
                               aria-label="previous" Class="mx-4"/>
            
                @foreach (var document in PaginatedDocuments)
                {
                    <MudButton Variant="@(document.Title == selectedDocument?.Title ? Variant.Outlined : Variant.Text)"
                               Color="@(document.Title == selectedDocument?.Title ? Color.Secondary : Color.Primary)"
                               OnClick="() => SelectDocument(document)" Class="mx-4">
                        @document.Title
                    </MudButton>
                }
            
                <MudIconButton Icon="@Icons.Material.Filled.ArrowForwardIos"
                               Disabled="@IsNextDisabled"
                               OnClick="NextPage"
                               aria-label="next" Class="mx-4"/>
           </MudStack>

            <object data="@selectedDocument.ContentPath" type="application/pdf" width="100%" height="650px" />
        }
        else
        {
            <MudText Typo="Typo.h6" Class="text-center">Il n'y a aucun document pour le moment</MudText>
        }
    </MudPaper>
</div>

@code {
    [Parameter]
    public string categoryId { get; set; }

    public List<Document> documents = new List<Document>();
    public Document selectedDocument;
    public Category category;
    private bool isInitialized { get; set; }
    private int pageIndex = 0;
    private int pageSize = 5;
    private List<Document> PaginatedDocuments => documents.Skip(pageIndex * pageSize).Take(pageSize).ToList();
    private bool IsPreviousDisabled => pageIndex == 0;
    private bool IsNextDisabled => (pageIndex + 1) * pageSize >= documents.Count;

    protected override async System.Threading.Tasks.Task OnInitializedAsync()
    {
        var categories = await categoryService.GetCategoriesAsync();
        category = categories.Where(x => x.Id == Convert.ToInt32(categoryId)).FirstOrDefault();
        var allDocuments = await documentService.GetDocuments();
        if(allDocuments.Count != 0)
        {
            documents = allDocuments.Where(x => x.CategoryId == Convert.ToInt32(categoryId)).ToList();
            if(documents != null)
            {
                selectedDocument = documents[0];
            }
        }
        isInitialized = true;
    }

    void SelectDocument(Document doc)
    {
        selectedDocument = doc;
    }

    private void PreviousPage()
{
    if (pageIndex > 0)
        pageIndex--;
}

private void NextPage()
{
    if ((pageIndex + 1) * pageSize < documents.Count)
        pageIndex++;
}
}
