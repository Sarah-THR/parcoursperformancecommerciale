@page "/history/{userId}/{weekId}"
@using EcoleDeLaPerformance.Ui.Interfaces
@using EcoleDeLaPerformance.Ui.Models
@using EcoleDeLaPerformance.Ui.Models.BI
@using EcoleDeLaPerformance.Ui.Services
@using EcoleDeLaPerformance.Ui.Shared.Components
@inject StateContainerService stateContainerService
@inject NavigationManager navigationManager
@inject IUserService userService
@inject IContractService contractService
@inject IBriefService briefService
@inject IDebriefService debriefService
@inject IJSRuntime JS

<div class="px-6">
    <MudPaper Elevation="1" Class="p-4 mb-6">
        <MudButton OnClick='GoBack'
                   Target="_blank"
                   Variant="Variant.Text"
                   StartIcon="@Icons.Material.Filled.ArrowBack"
                   Color="Color.Primary"
                   Style="text-transform:none"
                   Class="mb-6">
            Retour
        </MudButton>
        <MudGrid>
            <MudItem xs="12" md="6" Class="d-flex">
                <MudAvatar Size="Size.Large">
                    @if (commercial.ProfilePicturePath != null)
                    {
                        <MudImage Src="@commercial.ProfilePicturePath"></MudImage>
                    }
                    else
                    {
                        <MudIcon Icon="@Icons.Material.Filled.PhotoCamera" />
                    }
                </MudAvatar>
                <MudText Typo="Typo.h5" Color="Color.Primary" Class="fw-bold textcontent mt-3 mx-4">@commercial.Name</MudText>
            </MudItem>

            <MudFlexBreak />

            <MudItem xs="12" md="6">
                <MudTable Items="allContracts" Elevation="1" Bordered="false" HeaderClass="bg-primary bg-opacity-10">
                    <HeaderContent>
                        <MudTh Class="fw-bold fs-6">A faire</MudTh>
                        <MudTh Class="fw-bold fs-6">Objectif</MudTh>
                        <MudTh Class="fw-bold fs-6">Compte rendu</MudTh>
                        <MudTh Class="fw-bold fs-6">Indicateur</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd>
                            <MudText Typo="Typo.subtitle2">@context.label</MudText>
                        </MudTd>
                        <MudTd>
                            <MudText Typo="Typo.subtitle2">@context.contracts.Count()</MudText>
                        </MudTd>
                        <MudTd>
                            <MudText Typo="Typo.subtitle2">@context.contracts.Count()</MudText>
                        </MudTd>
                        <MudTd>
                            <MudText Typo="Typo.subtitle2">@GetIndicatorIcon(context.contracts.Count(), context.contracts.Count())</MudText>
                        </MudTd>
                    </RowTemplate>
                </MudTable>
            </MudItem>
            <MudItem xs="12" md="6">
                <MudGrid>
                    <MudItem xs="12" md="6">
                        <MudPaper Class="p-4 rounded-lg" Style="background: linear-gradient(to right, #fef2f2, #fee2e2);" MaxHeight="108px">
                            <MudText Typo="Typo.subtitle1" Class="text-red-600 font-medium">CA généré</MudText>
                            <MudText Typo="Typo.h6" Class="text-red-700 font-bold">@turnover.ToString("F") €</MudText>
                        </MudPaper>
                    </MudItem>
                    <MudItem xs="12" md="6">
                        <MudPaper Class="p-4 rounded-lg" Style="background: linear-gradient(to right, #ecfdf5, #d1fae5);" MaxHeight="108px">
                            <MudText Typo="Typo.subtitle1" Class="text-green-600 font-medium">Variable</MudText>
                            <MudText Typo="Typo.h6" Class="text-green-700 font-bold">@bonus.ToString("F") €</MudText>
                        </MudPaper>
                    </MudItem>
                </MudGrid>
            </MudItem>
            <MudItem xs="12">
                <MudPaper Elevation="2" Class="p-4 mb-6">
                    <PlanningDetails User="commercial" WeekId="Convert.ToInt32(weekId)" BaseDate="baseDate" />
                    <MudTabs @bind-ActivePanelIndex="_activeTab" Rounded="true" Centered="true" MinimumTabWidth="400px" ActiveTabClass="bg-primary bg-opacity-10">
                        <MudTabPanel Text="Briefing de la semaine">
                            <MudGrid Class="mt-4">
                                <MudItem xs="12" lg="6">
                                    <MudPaper Elevation="1" Class="p-4">
                                        <MudStack Row AlignItems="AlignItems.Center" Spacing="1" Class="mb-4">
                                            <MudIcon Icon="@Icons.Material.Filled.TrackChanges" Color="Color.Warning" />
                                            <MudText Typo="Typo.h6">Engagement de signature de la semaine</MudText>
                                        </MudStack>
                                        <MudList Dense="true" T="string" Disabled>
                                            @foreach (var brief in briefs)
                                            {
                                                @foreach (string signatureCommitment in (brief?.SignatureCommitment ?? "").Split('\n', StringSplitOptions.RemoveEmptyEntries))
                                                {
                                                    <EngagementItem Text="@signatureCommitment" />
                                                }
                                            }
                                        </MudList>
                                    </MudPaper>
                                </MudItem>

                                <MudItem xs="12" lg="6">
                                    <MudPaper Elevation="1" Class="p-4">
                                        <MudStack Row AlignItems="AlignItems.Center" Spacing="1" Class="mb-4">
                                            <MudIcon Icon="@Icons.Material.Filled.AssignmentTurnedIn" Color="Color.Secondary" />
                                            <MudText Typo="Typo.h6">Dossiers à checker</MudText>
                                        </MudStack>
                                        <MudList Dense="true" T="string" Disabled>
                                            @foreach (var brief in briefs)
                                            {
                                                @foreach (string filesToCheck in (brief?.FilesToCheck ?? "").Split('\n', StringSplitOptions.RemoveEmptyEntries))
                                                {
                                                    <FileItem Text="@filesToCheck" />
                                                }
                                            }
                                        </MudList>
                                    </MudPaper>
                                </MudItem>
                            </MudGrid>
                        </MudTabPanel>
                        <MudTabPanel Text="Debriefing de la semaine">
                            <MudGrid Class="mt-4">
                                <MudItem xs="12" lg="6">
                                    <MudPaper Elevation="1" Class="p-4">
                                        <MudStack Row AlignItems="AlignItems.Center" Spacing="1" Class="mb-4">
                                            <MudIcon Icon="@Icons.Material.Filled.BarChart" Color="Color.Warning" />
                                            <MudText Typo="Typo.h6">Affaires en cours</MudText>
                                        </MudStack>
                                        <MudList Dense="true" T="string" Disabled>
                                            @foreach (var debrief in debriefs)
                                            {
                                                @foreach (string businessInProgress in (debrief?.BusinessInProgress ?? "").Split('\n', StringSplitOptions.RemoveEmptyEntries))
                                                {
                                                    <EngagementItem Text="@businessInProgress" />
                                                }
                                            }
                                        </MudList>
                                    </MudPaper>
                                </MudItem>

                                <MudItem xs="12" lg="6">
                                    <MudPaper Elevation="1" Class="p-4">
                                        <MudStack Row AlignItems="AlignItems.Center" Spacing="1" Class="mb-4">
                                            <MudIcon Icon="@Icons.Material.Filled.BarChart" Color="Color.Secondary" />
                                            <MudText Typo="Typo.h6">Affaires levées</MudText>
                                        </MudStack>
                                        <MudList Dense="true" T="string" Disabled>
                                            @foreach (var debrief in debriefs)
                                            {
                                                @foreach (string completedBusiness in (debrief?.CompletedBusiness ?? "").Split('\n', StringSplitOptions.RemoveEmptyEntries))
                                                {
                                                    <FileItem Text="@completedBusiness" />
                                                }
                                            }
                                        </MudList>
                                    </MudPaper>
                                </MudItem>
                                <MudItem xs="12" md="12">
                                    <MudPaper Elevation="1">
                                        <MudCardContent>
                                            <MudStack Row AlignItems="AlignItems.Center" Spacing="2" Class="mb-4">
                                                <MudIcon Icon="@Icons.Material.Filled.Description" Color="Color.Primary" />
                                                <MudText Typo="Typo.h6">Dossiers et contrats signés</MudText>
                                            </MudStack>
                                            <MudGrid>
                                                <MudItem xs="12" md="4">
                                                    <DonutCard Title="Location" Icon="@Icons.Material.Filled.Leaderboard" IconColor="Color.Secondary" Data="@rentalData" Number="5" />
                                                </MudItem>
                                                <MudItem xs="12" md="4">
                                                    <DonutCard Title="Achats" Icon="@Icons.Material.Filled.Leaderboard" IconColor="Color.Secondary" Data="@purchaseData" Number="2" />
                                                </MudItem>
                                                <MudItem xs="12" md="4">
                                                    <DonutCard Title="Contrats" Icon="@Icons.Material.Filled.Leaderboard" IconColor="Color.Secondary" Data="@contratData" Number="2" />
                                                </MudItem>
                                            </MudGrid>
                                        </MudCardContent>
                                    </MudPaper>
                                </MudItem>
                                <MudItem xs="12" md="12">
                                    <MudPaper Elevation="1">
                                        <MudCardContent>
                                            <MudStack Row AlignItems="AlignItems.Center" Spacing="2" Class="mb-4">
                                                <MudIcon Icon="@Icons.Material.Filled.CalendarToday" Color="Color.Primary" />
                                                <div>
                                                    <MudText Typo="Typo.h6">Nombre de RDV PRA</MudText>
                                                    <MudText Typo="Typo.caption">(pris - réalisés - à venir)</MudText>
                                                </div>
                                            </MudStack>
                                            <MudGrid>
                                                <MudItem xs="12" md="12">
                                                    <DonutCard Title="Rendez-vous" Icon="@Icons.Material.Filled.Leaderboard" IconColor="Color.Secondary" Data="@appointmentData" Labels="@appointmentLabels" Number="@((int)((appointmentData ?? new double[0]).Sum()))" />
                                                </MudItem>
                                            </MudGrid>
                                        </MudCardContent>
                                    </MudPaper>
                                </MudItem>
                            </MudGrid>
                        </MudTabPanel>
                    </MudTabs>
                </MudPaper>
            </MudItem>
        </MudGrid>
    </MudPaper>
</div>

@code {
    [Parameter]
    public string userId { get; set; }
    [Parameter]
    public string weekId { get; set; }

    public User userInfo => stateContainerService.UserInfo;
    decimal turnover = 0;
    decimal bonus = 0;
    DateOnly baseDate = DateOnly.FromDateTime(DateTime.Today);
    List<TempClass> allContracts = new();
    User commercial = new User();
    int daysSinceMonday;
    DateOnly monday;
    DateOnly friday;
    private int _activeTab = 0;
    List<Brief?> briefs = new();
    List<Debrief?> debriefs = new();
    string[] appointmentLabels = new[] { "Rendez-vous à venir", "Rendez-vous réalisés" };
    double[] appointmentData;

    double[] rentalData = new[] { 5.0 };
    double[] purchaseData = new[] { 2.0 };
    double[] contratData = new[] { 2.0 };

    protected override async System.Threading.Tasks.Task OnInitializedAsync()
    {
        commercial = await userService.GetUserByIdAsync(Convert.ToInt32(userId));
        daysSinceMonday = ((int)baseDate.DayOfWeek + 6) % 7;
        monday = baseDate.AddDays(-daysSinceMonday);
        friday = monday.AddDays(4);

        briefs = await briefService.GetBriefByUserId(monday.ToDateTime(TimeOnly.MinValue), friday.ToDateTime(TimeOnly.MinValue), commercial.Id);
        debriefs = await debriefService.GetDebriefByUserAsync(monday.ToDateTime(TimeOnly.MinValue), friday.ToDateTime(TimeOnly.MinValue), commercial.Id);

        TempClass temp = new TempClass();
        turnover = await userService.GetUserTurnoverAsync(commercial.Name, monday, friday);
        bonus = await userService.GetUserBonusAsync(commercial.Name, monday, friday);
        var allContractsRaw = contractService.GetContractsByPeriod(commercial.Name, monday, friday);
        allContracts = new List<TempClass>();

        allContracts.Add(new TempClass
        {
            label = "Sauvegarde",
            contracts = allContractsRaw.Where(c => c.Sauvegarde == "OUI").ToList()
        });

        allContracts.Add(new TempClass
        {
            label = "Maintenance",
            contracts = allContractsRaw.Where(c => c.Maintenance == "OUI").ToList()
        });

        allContracts.Add(new TempClass
        {
            label = "Sécurité",
            contracts = allContractsRaw.Where(c => c.Sécurité == "OUI").ToList()
        });
        var nbAppointmentsRealised = await userService.GetNbAppointmentsAsync(commercial.Email, monday, baseDate);
        var nbAppointmentsOnGoing = await userService.GetNbAppointmentsAsync(commercial.Email, baseDate, friday);
        appointmentData = new double[] { nbAppointmentsOnGoing, nbAppointmentsRealised };
    }

    public class TempClass
    {
        public string label { get; set; }
        public List<EcolePerformanceSm?> contracts { get; set; } = new List<EcolePerformanceSm?>();
    }

    private string[] GetWeekDays()
    {
        var culture = System.Globalization.CultureInfo.GetCultureInfo("fr-FR");

        return Enumerable.Range(0, 5)
                         .Select(offset =>
                         {
                             var dayName = monday.AddDays(offset).ToString("dddd", culture);
                             return char.ToUpper(dayName[0]) + dayName.Substring(1);
                         })
                         .ToArray();
    }

    private RenderFragment GetIndicatorIcon(int goal, int realised) => @<MudIcon Icon="@GetIcon(goal, realised)" Color="@GetColor(goal, realised)" />;

    private Color GetColor(int goal, int realised)
    {
        if (goal == 0)
            return Color.Default;

        if (realised == goal / 2)
            return Color.Warning;

        if (realised < goal)
            return Color.Success;

        return Color.Error;
    }

    private string GetIcon(int goal, int realised)
    {
        if (goal == 0)
            return Icons.Material.Filled.HorizontalRule;

        if (realised == goal / 2)
            return Icons.Material.Filled.SsidChart;

        if (realised < goal)
            return Icons.Material.Filled.ArrowOutward;

        return Icons.Material.Filled.Cancel;
    }

    private async void GoBack()
    {
        await JS.InvokeVoidAsync("history.back");
    }
}
