@using BlazorDownloadFile
@using EcoleDeLaPerformance.Ui.Interfaces
@using EcoleDeLaPerformance.Ui.Models
@using EcoleDeLaPerformance.Ui.Services
@using EcoleDeLaPerformance.Ui.Shared.Components
@using EcoleDeLaPerformance.Ui.Shared.Dialog
@inject StateContainerService stateContainerService
@inject IDialogService dialog
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager
@inject ICategoryService categoryService
@inject IDocumentService documentService
@inject IJSRuntime JSRuntime
@page "/managecontent"

<div class="px-6">
    <MudPaper Elevation="1" Class="p-4 mb-6">
        <MudStack Row AlignItems="AlignItems.Center" Spacing="1" Class="mb-4">
            <MudIcon Icon="@Icons.Material.Filled.InstallDesktop" Color="Color.Primary" />
            <MudText Typo="Typo.h6">Gérer le contenu</MudText>
        </MudStack>
        @if (isInitialized)
        {
            <div class="row justify-content-between">
                <div class="col-md-3 col-12 col-lg-3 d-flex flex-column mb-4">
                    <MudForm @ref="form" Model="model">
                        <MudSelect T="string" Label="Choisir la catégorie" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter" @bind-Value="selectedClassId" Required RequiredError="Veuillez choisir une catégorie" Clearable>
                            @foreach (var category in categoriesList)
                            {
                                <MudSelectItem Value="@category.Id.ToString()">@category.Title</MudSelectItem>
                            }
                        </MudSelect>
                        <MudTextField @bind-Value="title" Label="Renseigner un titre" Variant="Variant.Outlined" Class="mt-4" Required RequiredError="Veuillez renseigner un titre" />
                        <UploadFiles filesUploadList="FilesList" filesList="filesUploadList" />
                        <MudButton Variant="Variant.Filled" Color="Color.Secondary" OnClick="@(async () => await SubmitForm())" Class="mt-6">Ajouter</MudButton>
                    </MudForm>
                </div>
                <div class="col-md-8 col-12 col-lg-8 d-flex flex-column">
                    <MudTable T="Document" Items="@filteredDocumentsList" Hover="true" Breakpoint="Breakpoint.Sm" @ref="mudTable"
                              RowClass="cursor-pointer" OnRowClick="RowClickEvent" FixedHeader="true" Height="400px" Filter="new Func<Document, bool>(FilterFunc1)">
                        <ToolBarContent>
                            <MudTextField @bind-Value="searchString" Placeholder="Rechercher un utilisateur" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
                            <MudSpacer />
                        </ToolBarContent>
                        <HeaderContent>
                            <MudTh>Document</MudTh>
                            <MudTh>Catégorie</MudTh>
                            <MudTh>Date d'ajout</MudTh>
                            <MudTh>Date de dernière modification</MudTh>
                            <MudTh></MudTh>
                            <MudTh></MudTh>
                            <MudTh></MudTh>
                        </HeaderContent>
                        <RowTemplate>
                            <MudTd DataLabel="Document">@context.Title</MudTd>
                            <MudTd DataLabel="Catégorie">@categoriesList.FirstOrDefault(c => c.Id == context.CategoryId)?.Title</MudTd>
                            <MudTd DataLabel="Date d'ajout">@context.CreatedAt.ToShortDateString()</MudTd>
                            <MudTd DataLabel="Date de dernière modification">@context.UpdatedAt</MudTd>
                            <MudTd DataLabel=""><MudIconButton Icon="@Icons.Material.Filled.Download" aria-label="download" Color="Color.Secondary" OnClick="() => DownloadDocument(context)"></MudIconButton></MudTd>
                            <MudTd DataLabel=""><MudIconButton Icon="@Icons.Material.Filled.Create" aria-label="update" Color="Color.Secondary" OnClick="() => UpdateDocument(context)"></MudIconButton></MudTd>
                            <MudTd DataLabel=""><MudIconButton Icon="@Icons.Material.Filled.Close" aria-label="delete" Color="Color.Secondary" OnClick="() => DeleteDocument(context.Id)"></MudIconButton></MudTd>
                        </RowTemplate>
                    </MudTable>
                </div>
            </div>
        }
        else
        {
            <div class="d-flex justify-content-center ">
                <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
            </div>
        }
    </MudPaper>
</div>

@code {
    private MudForm form;
    private MudTable<Document> mudTable;
    private bool isInitialized { get; set; }
    Document model = new Document();
    public User userInfo => stateContainerService.UserInfo;
    public List<Category?> categoriesList = new List<Category?>();
    public string title { get; set; }
    public string selectedClassId { get; set; }
    public List<IBrowserFile> filesUploadList = new();
    private string searchString;
    public List<Document>? documentsList = new List<Document>();
    public List<Document>? filteredDocumentsList = new List<Document>();

    protected override async System.Threading.Tasks.Task OnInitializedAsync()
    {
        categoriesList = await categoryService.GetCategoriesAsync();
        documentsList = categoriesList.SelectMany(x => x.Documents).ToList();
        filteredDocumentsList = documentsList;

        isInitialized = true;
    }

    private bool FilterFunc1(Document element) => FilterFunc(element, searchString);
    private bool FilterFunc(Document element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.Title.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }

    async void FilesList(List<IBrowserFile> value)
    {
        filesUploadList = value;
    }

    async void DeleteDocument(int documentId)
    {
        var parameters = new DialogParameters<ConfirmDialog>();

        parameters.Add("MainMessage", $"Voulez vous vraiment supprimer ce document ?");

        parameters.Add("ButtonConfirm", "Oui");
        parameters.Add("ButtonCancel", "Annuler");
        var options = new DialogOptions() { MaxWidth = MaxWidth.ExtraSmall, CloseButton = true, BackgroundClass = "DialogBackgroundBlurEffect" };
        var dialogresponse = await (await dialog.ShowAsync<ConfirmDialog>("Supprimer", parameters, options)).Result;
        if (!dialogresponse.Canceled)
        {
            await documentService.DeleteDocumentAsync(documentId);
            documentsList.RemoveAll(x => x.Id == documentId);
            Snackbar.Add("Le document a bien été supprimé", Severity.Warning);
        }
        StateHasChanged();
    }

    async void DownloadDocument(Document document)
    {
        var filePath = Uri.EscapeDataString(document.ContentPath);
        var downloadUrl = $"{filePath}";
        JSRuntime.InvokeVoidAsync("openInNewTab", downloadUrl);
    }

    private Document? selectedItem;
    private async void RowClickEvent(TableRowClickEventArgs<Document> tableRowClickEventArgs)
    {
        if (tableRowClickEventArgs != null)
        {
            selectedItem = tableRowClickEventArgs.Item;
            await UpdateDocument(selectedItem);
        }
    }

    async System.Threading.Tasks.Task UpdateDocument(Document document)
    {
        var parameters = new DialogParameters<UpdateFileDialog>();

        parameters.Add("userInfo", userInfo);
        parameters.Add("categoriesList", categoriesList);
        parameters.Add("document", document);
        parameters.Add("selectedClassId", document.CategoryId.ToString());

        var options = new DialogOptions() { MaxWidth = MaxWidth.Large, CloseButton = true, BackgroundClass = "DialogBackgroundBlurEffect" };
        var dialogrespons = await (await dialog.ShowAsync<UpdateFileDialog>("Modifier un document", parameters, options)).Result;

        StateHasChanged();
    }

    private async System.Threading.Tasks.Task SubmitForm()
    {
        await form.Validate();
        if (form.IsValid)
        {
            if (filesUploadList.Count != 0)
            {
                foreach (var file in filesUploadList)
                {
                    try
                    {
                        Document newDocument = new Document
                        {
                            Title = title,
                            CreatedAt = DateTime.Now,
                            CategoryId = int.Parse(selectedClassId),
                            UserId = userInfo.Id
                        };

                        string fileName = $"{Guid.NewGuid()}.pdf";

                        string wwwrootPath = Path.Combine(Environment.CurrentDirectory, "wwwroot", "documents");

                        if (!Directory.Exists(wwwrootPath))
                            Directory.CreateDirectory(wwwrootPath);

                        string filePath = Path.Combine(wwwrootPath, fileName);

                        await using FileStream fs = new(filePath, FileMode.Create);
                        await file.OpenReadStream().CopyToAsync(fs);

                        newDocument.ContentPath = $"/documents/{fileName}";
                        var createdDocument = await documentService.CreateDocumentAsync(newDocument);
                        filteredDocumentsList.Add(createdDocument);
                    }
                    catch (Exception ex)
                    {
                        Snackbar.Add($"Erreur lors de l'enregistrement du document : {ex.Message}", Severity.Error);
                        return;
                    }
                }
                title = "";
                selectedClassId = "";
                filesUploadList.Clear();
                StateHasChanged();
            }
            else
            {
                Snackbar.Add("Veuillez insérer un document PDF !", Severity.Error);
            }
        }
        else
        {
            Snackbar.Add("Veuillez remplir les champs obligatoires !", Severity.Error);
        }
    }
}
