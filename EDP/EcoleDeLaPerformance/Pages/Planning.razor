@page "/semaine"
@using EcoleDeLaPerformance.Ui.Services
@using EcoleDeLaPerformance.Ui.Interfaces;
@using EcoleDeLaPerformance.Ui.Shared.Components
@using EcoleDeLaPerformance.Ui.Models
@inject StateContainerService stateContainerService
@inject ISnackbar snackbar
@inject NavigationManager NavigationManager

<div style="user-select: none;" onselectstart="return false">
    <MudPaper Class="p-4 ma-4">
        <MudDropContainer T="DropItem"
                          Items="_items"
                          ItemsSelector="@((item, dropzone) => item.Identifier == dropzone)"
                          ItemDropped="ItemUpdated"
                          Class="d-flex flex-column">
            <ChildContent>
                <MudStack Row AlignItems="AlignItems.Center" Spacing="1" Class="mb-4">
                    <MudIcon Icon="@Icons.Material.Filled.EventAvailable" Color="Color.Secondary" />
                    <MudText Typo="Typo.h6">Liste des activités</MudText>
                </MudStack>
                @for (int r = 0; r < 2; r++)
                {
                    var row = r.ToString();
                    <div class="drop-row">
                        @for (int c = 0; c < 5; c++)
                        {
                            var col = c.ToString();
                            <MudDropZone T="DropItem" Identifier="@($"Task{row}{col}")" Class="border-1 ma-4 docs-gray-bg mud-border-lines-default rounded border-dashed" Style="height:70px" />
                        }
                    </div>
                }
                <MudStack Row AlignItems="AlignItems.Center" Spacing="1" Class="mb-4">
                    <MudIcon Icon="@Icons.Material.Filled.DateRange" Color="Color.Info" />
                    <MudText Typo="Typo.h6" Class="my-4">Planning de la semaine</MudText>
                </MudStack>
                <div>
                    <div class="drop-row my-2">
                        @foreach (var jour in jours)
                        {
                            <div style="text-align:center; font-weight:bold;">
                                @jour
                            </div>
                        }
                    </div>
                    @for (int r = 0; r < 2; r++)
                    {
                        var currentRow = r;
                        <div class="drop-row">
                            @for (int c = 0; c < 5; c++)
                            {
                                var col = c.ToString();
                                <MudDropZone T="DropItem" Identifier="@($"planning{currentRow}{col}")" Class="border-1 ma-4 docs-gray-bg mud-border-lines-default rounded border-dashed" Style="height:70px; position:relative;">
                                    <MudText Typo="Typo.subtitle1" Class="ma-2 opacity-50" Style="white-space: nowrap; position:absolute; top:0; left:0; ">@((currentRow == 0) ? "Matin" : "Après-midi")</MudText>
                                </MudDropZone>
                            }
                        </div>
                    }
                </div>
            </ChildContent>
            <ItemRenderer>
                <MudPaper Class="w-100 d-flex align-items-center justify-center" Elevation="1" Style="height:70px; background: linear-gradient(to right, #fef2f2, #fee2e2);">
                    <MudText Typo="Typo.subtitle1" Class="ma-2">@context.Name</MudText>
                </MudPaper>
            </ItemRenderer>
        </MudDropContainer>
    </MudPaper>
</div>

@code {
    private void ItemUpdated(MudItemDropInfo<DropItem> dropItem)
    {
        var oldIdentifier = dropItem.Item.Identifier; 

        bool alreadyOccupied = _items.Any(i =>
            i.Identifier == dropItem.DropzoneIdentifier &&
            i != dropItem.Item);

        if (alreadyOccupied)
        {
            snackbar.Add("Cette zone est déjà occupée", Severity.Warning);

            return;
        }

        dropItem.Item.Identifier = dropItem.DropzoneIdentifier;
    }

    private List<DropItem> _items = new()
    {
        new DropItem(){ Name = "Grumman", Team = "BLUE", Identifier = "Task00" },
        new DropItem(){ Name = "Tomcat", Team = "BLUE", Identifier = "Task01" },
        new DropItem(){ Name = "McDonnell", Team = "BLUE", Identifier = "Task02" },
        new DropItem(){ Name = "test", Team = "BLUE", Identifier = "Task03" },
        new DropItem(){ Name = "test@", Team = "BLUE", Identifier = "Task04" },
        new DropItem(){ Name = "Grumman", Team = "BLUE", Identifier = "Task05" },
        new DropItem(){ Name = "Grumman", Team = "BLUE", Identifier = "Task10" },
        new DropItem(){ Name = "Tomcat", Team = "BLUE", Identifier = "Task11" },
        new DropItem(){ Name = "McDonnell", Team = "BLUE", Identifier = "Task12" },
        new DropItem(){ Name = "test", Team = "BLUE", Identifier = "Task13" },
        new DropItem(){ Name = "test@", Team = "BLUE", Identifier = "Task14" },
        new DropItem(){ Name = "Grumman", Team = "BLUE", Identifier = "Task15" },
    };

    public class DropItem
    {
        public string Name { get; init; }
        public string Team { get; init; }
        public string Identifier { get; set; }
    }

    private DateTime GetMondayOfCurrentWeek()
    {
        var today = DateTime.Today;
        int diff = DayOfWeek.Monday - today.DayOfWeek;
        if (diff > 0) diff -= 7;
        return today.AddDays(diff);
    }

    private string[] GetWeekDays()
    {
        var culture = System.Globalization.CultureInfo.GetCultureInfo("fr-FR");
        DateTime monday = GetMondayOfCurrentWeek();

        return Enumerable.Range(0, 5)
                         .Select(offset =>
                         {
                             var dayName = monday.AddDays(offset).ToString("dddd", culture);
                             return char.ToUpper(dayName[0]) + dayName.Substring(1);
                         })
                         .ToArray();
    }

    private string[] jours = Array.Empty<string>();

    protected override void OnInitialized()
    {
        jours = GetWeekDays();
    }
}
