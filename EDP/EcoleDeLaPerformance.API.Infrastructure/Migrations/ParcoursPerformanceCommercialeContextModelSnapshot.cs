// <auto-generated />
using System;
using EcoleDeLaPerformance.API.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EcoleDeLaPerformance.API.Infrastructure.Migrations
{
    [DbContext(typeof(ParcoursPerformanceCommercialeContext))]
    partial class ParcoursPerformanceCommercialeContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EcoleDeLaPerformance.API.Core.Domain.Entities.Brief", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("FilesToCheck")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("files_to_check");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("note");

                    b.Property<string>("SignatureCommitment")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("signature_commitment");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("PK__briefs__3213E83F8E97A8C8");

                    b.HasIndex("UserId");

                    b.ToTable("briefs", (string)null);
                });

            modelBuilder.Entity("EcoleDeLaPerformance.API.Core.Domain.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("title");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("Id")
                        .HasName("PK__categori__3213E83F971B5BFD");

                    b.ToTable("categories", (string)null);
                });

            modelBuilder.Entity("EcoleDeLaPerformance.API.Core.Domain.Entities.Debrief", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BusinessInProgress")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("business_in_progress");

                    b.Property<string>("CompletedBusiness")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("completed_business");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("PK__debriefs__3213E83F75622013");

                    b.HasIndex("UserId");

                    b.ToTable("debriefs", (string)null);
                });

            modelBuilder.Entity("EcoleDeLaPerformance.API.Core.Domain.Entities.Document", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("category_id");

                    b.Property<string>("ContentPath")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("content_path");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("title");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("PK__document__3213E83F8CDF0AE3");

                    b.HasIndex("CategoryId");

                    b.HasIndex("UserId");

                    b.ToTable("documents", (string)null);
                });

            modelBuilder.Entity("EcoleDeLaPerformance.API.Core.Domain.Entities.Evaluation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("name");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("Id")
                        .HasName("PK__evaluati__3213E83FEFDC4BB3");

                    b.ToTable("evaluations", (string)null);
                });

            modelBuilder.Entity("EcoleDeLaPerformance.API.Core.Domain.Entities.Formation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("name");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("Id")
                        .HasName("PK__formatio__3213E83FF5152FEA");

                    b.ToTable("formations", (string)null);
                });

            modelBuilder.Entity("EcoleDeLaPerformance.API.Core.Domain.Entities.Grade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("name");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("Id")
                        .HasName("PK__grades__3213E83F3D2A0444");

                    b.ToTable("grades", (string)null);
                });

            modelBuilder.Entity("EcoleDeLaPerformance.API.Core.Domain.Entities.Planning", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("PK__planning__3213E83FEFD1DABD");

                    b.HasIndex("UserId");

                    b.ToTable("plannings", (string)null);
                });

            modelBuilder.Entity("EcoleDeLaPerformance.API.Core.Domain.Entities.PlanningsTask", b =>
                {
                    b.Property<int>("PlanningId")
                        .HasColumnType("int")
                        .HasColumnName("planning_id");

                    b.Property<int>("TaskId")
                        .HasColumnType("int")
                        .HasColumnName("task_id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("TimeOfDay")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("time_of_day");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("PlanningId", "TaskId");

                    b.HasIndex("TaskId");

                    b.ToTable("plannings_tasks", (string)null);
                });

            modelBuilder.Entity("EcoleDeLaPerformance.API.Core.Domain.Entities.Status", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("name");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("Id")
                        .HasName("PK__statuses__3213E83F8BFA154D");

                    b.ToTable("statuses", (string)null);
                });

            modelBuilder.Entity("EcoleDeLaPerformance.API.Core.Domain.Entities.Task", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("title");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("Id")
                        .HasName("PK__tasks__3213E83FB9325923");

                    b.ToTable("tasks", (string)null);
                });

            modelBuilder.Entity("EcoleDeLaPerformance.API.Core.Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("deleted_at");

                    b.Property<int?>("DirectorId")
                        .HasColumnType("int")
                        .HasColumnName("director_id");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("email");

                    b.Property<DateOnly?>("EndFollowUp")
                        .HasColumnType("date")
                        .HasColumnName("end_follow_up");

                    b.Property<string>("Entity")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("entity");

                    b.Property<int?>("GradeId")
                        .HasColumnType("int")
                        .HasColumnName("grade_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("name");

                    b.Property<string>("ProfilePicturePath")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("profile_picture_path");

                    b.Property<DateOnly?>("StartFollowUp")
                        .HasColumnType("date")
                        .HasColumnName("start_follow_up");

                    b.Property<int?>("SupervisorId")
                        .HasColumnType("int")
                        .HasColumnName("supervisor_id");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("Id")
                        .HasName("PK__users__3213E83F389B100E");

                    b.HasIndex("DirectorId");

                    b.HasIndex("GradeId");

                    b.HasIndex("SupervisorId");

                    b.HasIndex(new[] { "Email" }, "UQ__users__AB6E616424F4F6E3")
                        .IsUnique();

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("EcoleDeLaPerformance.API.Core.Domain.Entities.UsersFormation", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.Property<int>("FormationId")
                        .HasColumnType("int")
                        .HasColumnName("formation_id");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("comment");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("DocumentId")
                        .HasColumnType("int")
                        .HasColumnName("document_id");

                    b.Property<int?>("EvaluationId")
                        .HasColumnType("int")
                        .HasColumnName("evaluation_id");

                    b.Property<bool>("IsValidated")
                        .HasColumnType("bit")
                        .HasColumnName("is_validated");

                    b.Property<int?>("StatusId")
                        .HasColumnType("int")
                        .HasColumnName("status_id");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("UserId", "FormationId");

                    b.HasIndex("DocumentId");

                    b.HasIndex("EvaluationId");

                    b.HasIndex("FormationId");

                    b.HasIndex("StatusId");

                    b.ToTable("users_formations", (string)null);
                });

            modelBuilder.Entity("EcoleDeLaPerformance.API.Core.Domain.Entities.Brief", b =>
                {
                    b.HasOne("EcoleDeLaPerformance.API.Core.Domain.Entities.User", "User")
                        .WithMany("Briefs")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_briefs_user");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EcoleDeLaPerformance.API.Core.Domain.Entities.Debrief", b =>
                {
                    b.HasOne("EcoleDeLaPerformance.API.Core.Domain.Entities.User", "User")
                        .WithMany("Debriefs")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_debriefs_user");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EcoleDeLaPerformance.API.Core.Domain.Entities.Document", b =>
                {
                    b.HasOne("EcoleDeLaPerformance.API.Core.Domain.Entities.Category", "Category")
                        .WithMany("Documents")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_documents_category");

                    b.HasOne("EcoleDeLaPerformance.API.Core.Domain.Entities.User", "User")
                        .WithMany("Documents")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_documents_user");

                    b.Navigation("Category");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EcoleDeLaPerformance.API.Core.Domain.Entities.Planning", b =>
                {
                    b.HasOne("EcoleDeLaPerformance.API.Core.Domain.Entities.User", "User")
                        .WithMany("Plannings")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_plannings_user");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EcoleDeLaPerformance.API.Core.Domain.Entities.PlanningsTask", b =>
                {
                    b.HasOne("EcoleDeLaPerformance.API.Core.Domain.Entities.Planning", "Planning")
                        .WithMany("PlanningsTasks")
                        .HasForeignKey("PlanningId")
                        .IsRequired()
                        .HasConstraintName("FK_plannings_tasks_planning");

                    b.HasOne("EcoleDeLaPerformance.API.Core.Domain.Entities.Task", "Task")
                        .WithMany("PlanningsTasks")
                        .HasForeignKey("TaskId")
                        .IsRequired()
                        .HasConstraintName("FK_plannings_tasks_task");

                    b.Navigation("Planning");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("EcoleDeLaPerformance.API.Core.Domain.Entities.User", b =>
                {
                    b.HasOne("EcoleDeLaPerformance.API.Core.Domain.Entities.User", "Director")
                        .WithMany("InverseDirector")
                        .HasForeignKey("DirectorId")
                        .HasConstraintName("FK_users_director");

                    b.HasOne("EcoleDeLaPerformance.API.Core.Domain.Entities.Grade", "Grade")
                        .WithMany("Users")
                        .HasForeignKey("GradeId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_users_grade");

                    b.HasOne("EcoleDeLaPerformance.API.Core.Domain.Entities.User", "Supervisor")
                        .WithMany("InverseSupervisor")
                        .HasForeignKey("SupervisorId")
                        .HasConstraintName("FK_users_supervisor");

                    b.Navigation("Director");

                    b.Navigation("Grade");

                    b.Navigation("Supervisor");
                });

            modelBuilder.Entity("EcoleDeLaPerformance.API.Core.Domain.Entities.UsersFormation", b =>
                {
                    b.HasOne("EcoleDeLaPerformance.API.Core.Domain.Entities.Document", "Document")
                        .WithMany("UsersFormations")
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_users_formations_document");

                    b.HasOne("EcoleDeLaPerformance.API.Core.Domain.Entities.Evaluation", "Evaluation")
                        .WithMany("UsersFormations")
                        .HasForeignKey("EvaluationId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_users_formations_evaluation");

                    b.HasOne("EcoleDeLaPerformance.API.Core.Domain.Entities.Formation", "Formation")
                        .WithMany("UsersFormations")
                        .HasForeignKey("FormationId")
                        .IsRequired()
                        .HasConstraintName("FK_users_formations_formation");

                    b.HasOne("EcoleDeLaPerformance.API.Core.Domain.Entities.Status", "Status")
                        .WithMany("UsersFormations")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_users_formations_status");

                    b.HasOne("EcoleDeLaPerformance.API.Core.Domain.Entities.User", "User")
                        .WithMany("UsersFormations")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_users_formations_user");

                    b.Navigation("Document");

                    b.Navigation("Evaluation");

                    b.Navigation("Formation");

                    b.Navigation("Status");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EcoleDeLaPerformance.API.Core.Domain.Entities.Category", b =>
                {
                    b.Navigation("Documents");
                });

            modelBuilder.Entity("EcoleDeLaPerformance.API.Core.Domain.Entities.Document", b =>
                {
                    b.Navigation("UsersFormations");
                });

            modelBuilder.Entity("EcoleDeLaPerformance.API.Core.Domain.Entities.Evaluation", b =>
                {
                    b.Navigation("UsersFormations");
                });

            modelBuilder.Entity("EcoleDeLaPerformance.API.Core.Domain.Entities.Formation", b =>
                {
                    b.Navigation("UsersFormations");
                });

            modelBuilder.Entity("EcoleDeLaPerformance.API.Core.Domain.Entities.Grade", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("EcoleDeLaPerformance.API.Core.Domain.Entities.Planning", b =>
                {
                    b.Navigation("PlanningsTasks");
                });

            modelBuilder.Entity("EcoleDeLaPerformance.API.Core.Domain.Entities.Status", b =>
                {
                    b.Navigation("UsersFormations");
                });

            modelBuilder.Entity("EcoleDeLaPerformance.API.Core.Domain.Entities.Task", b =>
                {
                    b.Navigation("PlanningsTasks");
                });

            modelBuilder.Entity("EcoleDeLaPerformance.API.Core.Domain.Entities.User", b =>
                {
                    b.Navigation("Briefs");

                    b.Navigation("Debriefs");

                    b.Navigation("Documents");

                    b.Navigation("InverseDirector");

                    b.Navigation("InverseSupervisor");

                    b.Navigation("Plannings");

                    b.Navigation("UsersFormations");
                });
#pragma warning restore 612, 618
        }
    }
}
